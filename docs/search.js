window.pdocSearch = (function(){
/** elasticlunr - http://weixsong.github.io * Copyright (C) 2017 Oliver Nightingale * Copyright (C) 2017 Wei Song * MIT Licensed */!function(){function e(e){if(null===e||"object"!=typeof e)return e;var t=e.constructor();for(var n in e)e.hasOwnProperty(n)&&(t[n]=e[n]);return t}var t=function(e){var n=new t.Index;return n.pipeline.add(t.trimmer,t.stopWordFilter,t.stemmer),e&&e.call(n,n),n};t.version="0.9.5",lunr=t,t.utils={},t.utils.warn=function(e){return function(t){e.console&&console.warn&&console.warn(t)}}(this),t.utils.toString=function(e){return void 0===e||null===e?"":e.toString()},t.EventEmitter=function(){this.events={}},t.EventEmitter.prototype.addListener=function(){var e=Array.prototype.slice.call(arguments),t=e.pop(),n=e;if("function"!=typeof t)throw new TypeError("last argument must be a function");n.forEach(function(e){this.hasHandler(e)||(this.events[e]=[]),this.events[e].push(t)},this)},t.EventEmitter.prototype.removeListener=function(e,t){if(this.hasHandler(e)){var n=this.events[e].indexOf(t);-1!==n&&(this.events[e].splice(n,1),0==this.events[e].length&&delete this.events[e])}},t.EventEmitter.prototype.emit=function(e){if(this.hasHandler(e)){var t=Array.prototype.slice.call(arguments,1);this.events[e].forEach(function(e){e.apply(void 0,t)},this)}},t.EventEmitter.prototype.hasHandler=function(e){return e in this.events},t.tokenizer=function(e){if(!arguments.length||null===e||void 0===e)return[];if(Array.isArray(e)){var n=e.filter(function(e){return null===e||void 0===e?!1:!0});n=n.map(function(e){return t.utils.toString(e).toLowerCase()});var i=[];return n.forEach(function(e){var n=e.split(t.tokenizer.seperator);i=i.concat(n)},this),i}return e.toString().trim().toLowerCase().split(t.tokenizer.seperator)},t.tokenizer.defaultSeperator=/[\s\-]+/,t.tokenizer.seperator=t.tokenizer.defaultSeperator,t.tokenizer.setSeperator=function(e){null!==e&&void 0!==e&&"object"==typeof e&&(t.tokenizer.seperator=e)},t.tokenizer.resetSeperator=function(){t.tokenizer.seperator=t.tokenizer.defaultSeperator},t.tokenizer.getSeperator=function(){return t.tokenizer.seperator},t.Pipeline=function(){this._queue=[]},t.Pipeline.registeredFunctions={},t.Pipeline.registerFunction=function(e,n){n in t.Pipeline.registeredFunctions&&t.utils.warn("Overwriting existing registered function: "+n),e.label=n,t.Pipeline.registeredFunctions[n]=e},t.Pipeline.getRegisteredFunction=function(e){return e in t.Pipeline.registeredFunctions!=!0?null:t.Pipeline.registeredFunctions[e]},t.Pipeline.warnIfFunctionNotRegistered=function(e){var n=e.label&&e.label in this.registeredFunctions;n||t.utils.warn("Function is not registered with pipeline. This may cause problems when serialising the index.\n",e)},t.Pipeline.load=function(e){var n=new t.Pipeline;return e.forEach(function(e){var i=t.Pipeline.getRegisteredFunction(e);if(!i)throw new Error("Cannot load un-registered function: "+e);n.add(i)}),n},t.Pipeline.prototype.add=function(){var e=Array.prototype.slice.call(arguments);e.forEach(function(e){t.Pipeline.warnIfFunctionNotRegistered(e),this._queue.push(e)},this)},t.Pipeline.prototype.after=function(e,n){t.Pipeline.warnIfFunctionNotRegistered(n);var i=this._queue.indexOf(e);if(-1===i)throw new Error("Cannot find existingFn");this._queue.splice(i+1,0,n)},t.Pipeline.prototype.before=function(e,n){t.Pipeline.warnIfFunctionNotRegistered(n);var i=this._queue.indexOf(e);if(-1===i)throw new Error("Cannot find existingFn");this._queue.splice(i,0,n)},t.Pipeline.prototype.remove=function(e){var t=this._queue.indexOf(e);-1!==t&&this._queue.splice(t,1)},t.Pipeline.prototype.run=function(e){for(var t=[],n=e.length,i=this._queue.length,o=0;n>o;o++){for(var r=e[o],s=0;i>s&&(r=this._queue[s](r,o,e),void 0!==r&&null!==r);s++);void 0!==r&&null!==r&&t.push(r)}return t},t.Pipeline.prototype.reset=function(){this._queue=[]},t.Pipeline.prototype.get=function(){return this._queue},t.Pipeline.prototype.toJSON=function(){return this._queue.map(function(e){return t.Pipeline.warnIfFunctionNotRegistered(e),e.label})},t.Index=function(){this._fields=[],this._ref="id",this.pipeline=new t.Pipeline,this.documentStore=new t.DocumentStore,this.index={},this.eventEmitter=new t.EventEmitter,this._idfCache={},this.on("add","remove","update",function(){this._idfCache={}}.bind(this))},t.Index.prototype.on=function(){var e=Array.prototype.slice.call(arguments);return this.eventEmitter.addListener.apply(this.eventEmitter,e)},t.Index.prototype.off=function(e,t){return this.eventEmitter.removeListener(e,t)},t.Index.load=function(e){e.version!==t.version&&t.utils.warn("version mismatch: current "+t.version+" importing "+e.version);var n=new this;n._fields=e.fields,n._ref=e.ref,n.documentStore=t.DocumentStore.load(e.documentStore),n.pipeline=t.Pipeline.load(e.pipeline),n.index={};for(var i in e.index)n.index[i]=t.InvertedIndex.load(e.index[i]);return n},t.Index.prototype.addField=function(e){return this._fields.push(e),this.index[e]=new t.InvertedIndex,this},t.Index.prototype.setRef=function(e){return this._ref=e,this},t.Index.prototype.saveDocument=function(e){return this.documentStore=new t.DocumentStore(e),this},t.Index.prototype.addDoc=function(e,n){if(e){var n=void 0===n?!0:n,i=e[this._ref];this.documentStore.addDoc(i,e),this._fields.forEach(function(n){var o=this.pipeline.run(t.tokenizer(e[n]));this.documentStore.addFieldLength(i,n,o.length);var r={};o.forEach(function(e){e in r?r[e]+=1:r[e]=1},this);for(var s in r){var u=r[s];u=Math.sqrt(u),this.index[n].addToken(s,{ref:i,tf:u})}},this),n&&this.eventEmitter.emit("add",e,this)}},t.Index.prototype.removeDocByRef=function(e){if(e&&this.documentStore.isDocStored()!==!1&&this.documentStore.hasDoc(e)){var t=this.documentStore.getDoc(e);this.removeDoc(t,!1)}},t.Index.prototype.removeDoc=function(e,n){if(e){var n=void 0===n?!0:n,i=e[this._ref];this.documentStore.hasDoc(i)&&(this.documentStore.removeDoc(i),this._fields.forEach(function(n){var o=this.pipeline.run(t.tokenizer(e[n]));o.forEach(function(e){this.index[n].removeToken(e,i)},this)},this),n&&this.eventEmitter.emit("remove",e,this))}},t.Index.prototype.updateDoc=function(e,t){var t=void 0===t?!0:t;this.removeDocByRef(e[this._ref],!1),this.addDoc(e,!1),t&&this.eventEmitter.emit("update",e,this)},t.Index.prototype.idf=function(e,t){var n="@"+t+"/"+e;if(Object.prototype.hasOwnProperty.call(this._idfCache,n))return this._idfCache[n];var i=this.index[t].getDocFreq(e),o=1+Math.log(this.documentStore.length/(i+1));return this._idfCache[n]=o,o},t.Index.prototype.getFields=function(){return this._fields.slice()},t.Index.prototype.search=function(e,n){if(!e)return[];e="string"==typeof e?{any:e}:JSON.parse(JSON.stringify(e));var i=null;null!=n&&(i=JSON.stringify(n));for(var o=new t.Configuration(i,this.getFields()).get(),r={},s=Object.keys(e),u=0;u<s.length;u++){var a=s[u];r[a]=this.pipeline.run(t.tokenizer(e[a]))}var l={};for(var c in o){var d=r[c]||r.any;if(d){var f=this.fieldSearch(d,c,o),h=o[c].boost;for(var p in f)f[p]=f[p]*h;for(var p in f)p in l?l[p]+=f[p]:l[p]=f[p]}}var v,g=[];for(var p in l)v={ref:p,score:l[p]},this.documentStore.hasDoc(p)&&(v.doc=this.documentStore.getDoc(p)),g.push(v);return g.sort(function(e,t){return t.score-e.score}),g},t.Index.prototype.fieldSearch=function(e,t,n){var i=n[t].bool,o=n[t].expand,r=n[t].boost,s=null,u={};return 0!==r?(e.forEach(function(e){var n=[e];1==o&&(n=this.index[t].expandToken(e));var r={};n.forEach(function(n){var o=this.index[t].getDocs(n),a=this.idf(n,t);if(s&&"AND"==i){var l={};for(var c in s)c in o&&(l[c]=o[c]);o=l}n==e&&this.fieldSearchStats(u,n,o);for(var c in o){var d=this.index[t].getTermFrequency(n,c),f=this.documentStore.getFieldLength(c,t),h=1;0!=f&&(h=1/Math.sqrt(f));var p=1;n!=e&&(p=.15*(1-(n.length-e.length)/n.length));var v=d*a*h*p;c in r?r[c]+=v:r[c]=v}},this),s=this.mergeScores(s,r,i)},this),s=this.coordNorm(s,u,e.length)):void 0},t.Index.prototype.mergeScores=function(e,t,n){if(!e)return t;if("AND"==n){var i={};for(var o in t)o in e&&(i[o]=e[o]+t[o]);return i}for(var o in t)o in e?e[o]+=t[o]:e[o]=t[o];return e},t.Index.prototype.fieldSearchStats=function(e,t,n){for(var i in n)i in e?e[i].push(t):e[i]=[t]},t.Index.prototype.coordNorm=function(e,t,n){for(var i in e)if(i in t){var o=t[i].length;e[i]=e[i]*o/n}return e},t.Index.prototype.toJSON=function(){var e={};return this._fields.forEach(function(t){e[t]=this.index[t].toJSON()},this),{version:t.version,fields:this._fields,ref:this._ref,documentStore:this.documentStore.toJSON(),index:e,pipeline:this.pipeline.toJSON()}},t.Index.prototype.use=function(e){var t=Array.prototype.slice.call(arguments,1);t.unshift(this),e.apply(this,t)},t.DocumentStore=function(e){this._save=null===e||void 0===e?!0:e,this.docs={},this.docInfo={},this.length=0},t.DocumentStore.load=function(e){var t=new this;return t.length=e.length,t.docs=e.docs,t.docInfo=e.docInfo,t._save=e.save,t},t.DocumentStore.prototype.isDocStored=function(){return this._save},t.DocumentStore.prototype.addDoc=function(t,n){this.hasDoc(t)||this.length++,this.docs[t]=this._save===!0?e(n):null},t.DocumentStore.prototype.getDoc=function(e){return this.hasDoc(e)===!1?null:this.docs[e]},t.DocumentStore.prototype.hasDoc=function(e){return e in this.docs},t.DocumentStore.prototype.removeDoc=function(e){this.hasDoc(e)&&(delete this.docs[e],delete this.docInfo[e],this.length--)},t.DocumentStore.prototype.addFieldLength=function(e,t,n){null!==e&&void 0!==e&&0!=this.hasDoc(e)&&(this.docInfo[e]||(this.docInfo[e]={}),this.docInfo[e][t]=n)},t.DocumentStore.prototype.updateFieldLength=function(e,t,n){null!==e&&void 0!==e&&0!=this.hasDoc(e)&&this.addFieldLength(e,t,n)},t.DocumentStore.prototype.getFieldLength=function(e,t){return null===e||void 0===e?0:e in this.docs&&t in this.docInfo[e]?this.docInfo[e][t]:0},t.DocumentStore.prototype.toJSON=function(){return{docs:this.docs,docInfo:this.docInfo,length:this.length,save:this._save}},t.stemmer=function(){var e={ational:"ate",tional:"tion",enci:"ence",anci:"ance",izer:"ize",bli:"ble",alli:"al",entli:"ent",eli:"e",ousli:"ous",ization:"ize",ation:"ate",ator:"ate",alism:"al",iveness:"ive",fulness:"ful",ousness:"ous",aliti:"al",iviti:"ive",biliti:"ble",logi:"log"},t={icate:"ic",ative:"",alize:"al",iciti:"ic",ical:"ic",ful:"",ness:""},n="[^aeiou]",i="[aeiouy]",o=n+"[^aeiouy]*",r=i+"[aeiou]*",s="^("+o+")?"+r+o,u="^("+o+")?"+r+o+"("+r+")?$",a="^("+o+")?"+r+o+r+o,l="^("+o+")?"+i,c=new RegExp(s),d=new RegExp(a),f=new RegExp(u),h=new RegExp(l),p=/^(.+?)(ss|i)es$/,v=/^(.+?)([^s])s$/,g=/^(.+?)eed$/,m=/^(.+?)(ed|ing)$/,y=/.$/,S=/(at|bl|iz)$/,x=new RegExp("([^aeiouylsz])\\1$"),w=new RegExp("^"+o+i+"[^aeiouwxy]$"),I=/^(.+?[^aeiou])y$/,b=/^(.+?)(ational|tional|enci|anci|izer|bli|alli|entli|eli|ousli|ization|ation|ator|alism|iveness|fulness|ousness|aliti|iviti|biliti|logi)$/,E=/^(.+?)(icate|ative|alize|iciti|ical|ful|ness)$/,D=/^(.+?)(al|ance|ence|er|ic|able|ible|ant|ement|ment|ent|ou|ism|ate|iti|ous|ive|ize)$/,F=/^(.+?)(s|t)(ion)$/,_=/^(.+?)e$/,P=/ll$/,k=new RegExp("^"+o+i+"[^aeiouwxy]$"),z=function(n){var i,o,r,s,u,a,l;if(n.length<3)return n;if(r=n.substr(0,1),"y"==r&&(n=r.toUpperCase()+n.substr(1)),s=p,u=v,s.test(n)?n=n.replace(s,"$1$2"):u.test(n)&&(n=n.replace(u,"$1$2")),s=g,u=m,s.test(n)){var z=s.exec(n);s=c,s.test(z[1])&&(s=y,n=n.replace(s,""))}else if(u.test(n)){var z=u.exec(n);i=z[1],u=h,u.test(i)&&(n=i,u=S,a=x,l=w,u.test(n)?n+="e":a.test(n)?(s=y,n=n.replace(s,"")):l.test(n)&&(n+="e"))}if(s=I,s.test(n)){var z=s.exec(n);i=z[1],n=i+"i"}if(s=b,s.test(n)){var z=s.exec(n);i=z[1],o=z[2],s=c,s.test(i)&&(n=i+e[o])}if(s=E,s.test(n)){var z=s.exec(n);i=z[1],o=z[2],s=c,s.test(i)&&(n=i+t[o])}if(s=D,u=F,s.test(n)){var z=s.exec(n);i=z[1],s=d,s.test(i)&&(n=i)}else if(u.test(n)){var z=u.exec(n);i=z[1]+z[2],u=d,u.test(i)&&(n=i)}if(s=_,s.test(n)){var z=s.exec(n);i=z[1],s=d,u=f,a=k,(s.test(i)||u.test(i)&&!a.test(i))&&(n=i)}return s=P,u=d,s.test(n)&&u.test(n)&&(s=y,n=n.replace(s,"")),"y"==r&&(n=r.toLowerCase()+n.substr(1)),n};return z}(),t.Pipeline.registerFunction(t.stemmer,"stemmer"),t.stopWordFilter=function(e){return e&&t.stopWordFilter.stopWords[e]!==!0?e:void 0},t.clearStopWords=function(){t.stopWordFilter.stopWords={}},t.addStopWords=function(e){null!=e&&Array.isArray(e)!==!1&&e.forEach(function(e){t.stopWordFilter.stopWords[e]=!0},this)},t.resetStopWords=function(){t.stopWordFilter.stopWords=t.defaultStopWords},t.defaultStopWords={"":!0,a:!0,able:!0,about:!0,across:!0,after:!0,all:!0,almost:!0,also:!0,am:!0,among:!0,an:!0,and:!0,any:!0,are:!0,as:!0,at:!0,be:!0,because:!0,been:!0,but:!0,by:!0,can:!0,cannot:!0,could:!0,dear:!0,did:!0,"do":!0,does:!0,either:!0,"else":!0,ever:!0,every:!0,"for":!0,from:!0,get:!0,got:!0,had:!0,has:!0,have:!0,he:!0,her:!0,hers:!0,him:!0,his:!0,how:!0,however:!0,i:!0,"if":!0,"in":!0,into:!0,is:!0,it:!0,its:!0,just:!0,least:!0,let:!0,like:!0,likely:!0,may:!0,me:!0,might:!0,most:!0,must:!0,my:!0,neither:!0,no:!0,nor:!0,not:!0,of:!0,off:!0,often:!0,on:!0,only:!0,or:!0,other:!0,our:!0,own:!0,rather:!0,said:!0,say:!0,says:!0,she:!0,should:!0,since:!0,so:!0,some:!0,than:!0,that:!0,the:!0,their:!0,them:!0,then:!0,there:!0,these:!0,they:!0,"this":!0,tis:!0,to:!0,too:!0,twas:!0,us:!0,wants:!0,was:!0,we:!0,were:!0,what:!0,when:!0,where:!0,which:!0,"while":!0,who:!0,whom:!0,why:!0,will:!0,"with":!0,would:!0,yet:!0,you:!0,your:!0},t.stopWordFilter.stopWords=t.defaultStopWords,t.Pipeline.registerFunction(t.stopWordFilter,"stopWordFilter"),t.trimmer=function(e){if(null===e||void 0===e)throw new Error("token should not be undefined");return e.replace(/^\W+/,"").replace(/\W+$/,"")},t.Pipeline.registerFunction(t.trimmer,"trimmer"),t.InvertedIndex=function(){this.root={docs:{},df:0}},t.InvertedIndex.load=function(e){var t=new this;return t.root=e.root,t},t.InvertedIndex.prototype.addToken=function(e,t,n){for(var n=n||this.root,i=0;i<=e.length-1;){var o=e[i];o in n||(n[o]={docs:{},df:0}),i+=1,n=n[o]}var r=t.ref;n.docs[r]?n.docs[r]={tf:t.tf}:(n.docs[r]={tf:t.tf},n.df+=1)},t.InvertedIndex.prototype.hasToken=function(e){if(!e)return!1;for(var t=this.root,n=0;n<e.length;n++){if(!t[e[n]])return!1;t=t[e[n]]}return!0},t.InvertedIndex.prototype.getNode=function(e){if(!e)return null;for(var t=this.root,n=0;n<e.length;n++){if(!t[e[n]])return null;t=t[e[n]]}return t},t.InvertedIndex.prototype.getDocs=function(e){var t=this.getNode(e);return null==t?{}:t.docs},t.InvertedIndex.prototype.getTermFrequency=function(e,t){var n=this.getNode(e);return null==n?0:t in n.docs?n.docs[t].tf:0},t.InvertedIndex.prototype.getDocFreq=function(e){var t=this.getNode(e);return null==t?0:t.df},t.InvertedIndex.prototype.removeToken=function(e,t){if(e){var n=this.getNode(e);null!=n&&t in n.docs&&(delete n.docs[t],n.df-=1)}},t.InvertedIndex.prototype.expandToken=function(e,t,n){if(null==e||""==e)return[];var t=t||[];if(void 0==n&&(n=this.getNode(e),null==n))return t;n.df>0&&t.push(e);for(var i in n)"docs"!==i&&"df"!==i&&this.expandToken(e+i,t,n[i]);return t},t.InvertedIndex.prototype.toJSON=function(){return{root:this.root}},t.Configuration=function(e,n){var e=e||"";if(void 0==n||null==n)throw new Error("fields should not be null");this.config={};var i;try{i=JSON.parse(e),this.buildUserConfig(i,n)}catch(o){t.utils.warn("user configuration parse failed, will use default configuration"),this.buildDefaultConfig(n)}},t.Configuration.prototype.buildDefaultConfig=function(e){this.reset(),e.forEach(function(e){this.config[e]={boost:1,bool:"OR",expand:!1}},this)},t.Configuration.prototype.buildUserConfig=function(e,n){var i="OR",o=!1;if(this.reset(),"bool"in e&&(i=e.bool||i),"expand"in e&&(o=e.expand||o),"fields"in e)for(var r in e.fields)if(n.indexOf(r)>-1){var s=e.fields[r],u=o;void 0!=s.expand&&(u=s.expand),this.config[r]={boost:s.boost||0===s.boost?s.boost:1,bool:s.bool||i,expand:u}}else t.utils.warn("field name in user configuration not found in index instance fields");else this.addAllFields2UserConfig(i,o,n)},t.Configuration.prototype.addAllFields2UserConfig=function(e,t,n){n.forEach(function(n){this.config[n]={boost:1,bool:e,expand:t}},this)},t.Configuration.prototype.get=function(){return this.config},t.Configuration.prototype.reset=function(){this.config={}},lunr.SortedSet=function(){this.length=0,this.elements=[]},lunr.SortedSet.load=function(e){var t=new this;return t.elements=e,t.length=e.length,t},lunr.SortedSet.prototype.add=function(){var e,t;for(e=0;e<arguments.length;e++)t=arguments[e],~this.indexOf(t)||this.elements.splice(this.locationFor(t),0,t);this.length=this.elements.length},lunr.SortedSet.prototype.toArray=function(){return this.elements.slice()},lunr.SortedSet.prototype.map=function(e,t){return this.elements.map(e,t)},lunr.SortedSet.prototype.forEach=function(e,t){return this.elements.forEach(e,t)},lunr.SortedSet.prototype.indexOf=function(e){for(var t=0,n=this.elements.length,i=n-t,o=t+Math.floor(i/2),r=this.elements[o];i>1;){if(r===e)return o;e>r&&(t=o),r>e&&(n=o),i=n-t,o=t+Math.floor(i/2),r=this.elements[o]}return r===e?o:-1},lunr.SortedSet.prototype.locationFor=function(e){for(var t=0,n=this.elements.length,i=n-t,o=t+Math.floor(i/2),r=this.elements[o];i>1;)e>r&&(t=o),r>e&&(n=o),i=n-t,o=t+Math.floor(i/2),r=this.elements[o];return r>e?o:e>r?o+1:void 0},lunr.SortedSet.prototype.intersect=function(e){for(var t=new lunr.SortedSet,n=0,i=0,o=this.length,r=e.length,s=this.elements,u=e.elements;;){if(n>o-1||i>r-1)break;s[n]!==u[i]?s[n]<u[i]?n++:s[n]>u[i]&&i++:(t.add(s[n]),n++,i++)}return t},lunr.SortedSet.prototype.clone=function(){var e=new lunr.SortedSet;return e.elements=this.toArray(),e.length=e.elements.length,e},lunr.SortedSet.prototype.union=function(e){var t,n,i;this.length>=e.length?(t=this,n=e):(t=e,n=this),i=t.clone();for(var o=0,r=n.toArray();o<r.length;o++)i.add(r[o]);return i},lunr.SortedSet.prototype.toJSON=function(){return this.toArray()},function(e,t){"function"==typeof define&&define.amd?define(t):"object"==typeof exports?module.exports=t():e.elasticlunr=t()}(this,function(){return t})}();
    /** pdoc search index */const docs = [{"fullname": "inovopy", "modulename": "inovopy", "kind": "module", "doc": "<h1 id=\"inovopy\">inovopy</h1>\n\n<p>This library provide simple api for application interacting with\ninovo robot arm.</p>\n\n<h2 id=\"modules\">Modules</h2>\n\n<ul>\n<li><code>socket</code>, tcp socket-based communication api</li>\n<li><code>geometry</code>, joint-space and 3D spatial data structure and api</li>\n<li><code>iva</code>, message generation for iva protocal (a robot protocal interfacing with inovo robot arm)</li>\n<li><code>rosbridge</code>, rosbridge API to control psu</li>\n<li><code>util</code>, utilility module</li>\n</ul>\n"}, {"fullname": "inovopy.geometry", "modulename": "inovopy.geometry", "kind": "module", "doc": "<h1 id=\"geometry-module\">Geometry Module</h1>\n\n<p>This module provide geometric data structure class for robot control</p>\n\n<h2 id=\"modules\">Modules</h2>\n\n<ul>\n<li><code>transform</code> : Functions and Class for 3D spatial transform</li>\n<li><code>jointcoord</code> : 6D joint space representation</li>\n</ul>\n"}, {"fullname": "inovopy.geometry.deg_to_rad", "modulename": "inovopy.geometry", "qualname": "deg_to_rad", "kind": "function", "doc": "<p>translate degree to radian</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">deg</span><span class=\"p\">:</span> <span class=\"nb\">float</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">float</span>:</span></span>", "funcdef": "def"}, {"fullname": "inovopy.geometry.rad_to_deg", "modulename": "inovopy.geometry", "qualname": "rad_to_deg", "kind": "function", "doc": "<p>translate radion to degree</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">rad</span><span class=\"p\">:</span> <span class=\"nb\">float</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">float</span>:</span></span>", "funcdef": "def"}, {"fullname": "inovopy.geometry.IntoRobotCommand", "modulename": "inovopy.geometry", "qualname": "IntoRobotCommand", "kind": "class", "doc": "<h1 id=\"intorobotcommand\">IntoRobotCommand</h1>\n\n<p>An interface for all class that can be turn into robot command</p>\n\n<h2 id=\"method\">Method</h2>\n\n<ul>\n<li><code>as_motion</code></li>\n<li><code>as_linear</code></li>\n<li><code>as_linear_relative</code></li>\n<li><code>as_joint</code></li>\n<li><code>as_joint_relative</code></li>\n</ul>\n", "bases": "abc.ABC"}, {"fullname": "inovopy.geometry.IntoRobotCommand.as_motion", "modulename": "inovopy.geometry", "qualname": "IntoRobotCommand.as_motion", "kind": "function", "doc": "<p>construct a new motion command from the <code>self</code></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">motion_mode</span><span class=\"p\">:</span> <span class=\"n\">inovopy</span><span class=\"o\">.</span><span class=\"n\">iva</span><span class=\"o\">.</span><span class=\"n\">MotionMode</span></span><span class=\"return-annotation\">) -> <span class=\"n\">inovopy</span><span class=\"o\">.</span><span class=\"n\">iva</span><span class=\"o\">.</span><span class=\"n\">RobotCommand</span>:</span></span>", "funcdef": "def"}, {"fullname": "inovopy.geometry.IntoRobotCommand.as_linear", "modulename": "inovopy.geometry", "qualname": "IntoRobotCommand.as_linear", "kind": "function", "doc": "<p>construct a new linear motion command from the <code>self</code></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">) -> <span class=\"n\">inovopy</span><span class=\"o\">.</span><span class=\"n\">iva</span><span class=\"o\">.</span><span class=\"n\">RobotCommand</span>:</span></span>", "funcdef": "def"}, {"fullname": "inovopy.geometry.IntoRobotCommand.as_linear_relative", "modulename": "inovopy.geometry", "qualname": "IntoRobotCommand.as_linear_relative", "kind": "function", "doc": "<p>construct a new linear relative motion command from the <code>self</code></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">) -> <span class=\"n\">inovopy</span><span class=\"o\">.</span><span class=\"n\">iva</span><span class=\"o\">.</span><span class=\"n\">RobotCommand</span>:</span></span>", "funcdef": "def"}, {"fullname": "inovopy.geometry.IntoRobotCommand.as_joint", "modulename": "inovopy.geometry", "qualname": "IntoRobotCommand.as_joint", "kind": "function", "doc": "<p>construct a new joint motion command from the <code>self</code></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">) -> <span class=\"n\">inovopy</span><span class=\"o\">.</span><span class=\"n\">iva</span><span class=\"o\">.</span><span class=\"n\">RobotCommand</span>:</span></span>", "funcdef": "def"}, {"fullname": "inovopy.geometry.IntoRobotCommand.as_joint_relative", "modulename": "inovopy.geometry", "qualname": "IntoRobotCommand.as_joint_relative", "kind": "function", "doc": "<p>construct a new joint relative motion command from the <code>self</code></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">) -> <span class=\"n\">inovopy</span><span class=\"o\">.</span><span class=\"n\">iva</span><span class=\"o\">.</span><span class=\"n\">RobotCommand</span>:</span></span>", "funcdef": "def"}, {"fullname": "inovopy.geometry.jointcoord", "modulename": "inovopy.geometry.jointcoord", "kind": "module", "doc": "<h1 id=\"joint-coord-module\">Joint Coord Module</h1>\n\n<p>This module provide joint space representation class for joint space</p>\n\n<h2 id=\"class\">Class</h2>\n\n<ul>\n<li><code>JointCoord</code> : 6D joint space representation</li>\n</ul>\n"}, {"fullname": "inovopy.geometry.jointcoord.JointCoord", "modulename": "inovopy.geometry.jointcoord", "qualname": "JointCoord", "kind": "class", "doc": "<h1 id=\"jointcoord\">JointCoord</h1>\n\n<p>A class representing 6D joint space of robot</p>\n", "bases": "inovopy.geometry.IntoRobotCommand"}, {"fullname": "inovopy.geometry.jointcoord.JointCoord.__init__", "modulename": "inovopy.geometry.jointcoord", "qualname": "JointCoord.__init__", "kind": "function", "doc": "<p>Construct a new joint space representation from all joint angle</p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">j1_deg</span><span class=\"p\">:</span> <span class=\"nb\">float</span> <span class=\"o\">=</span> <span class=\"mi\">0</span>,</span><span class=\"param\">\t<span class=\"n\">j2_deg</span><span class=\"p\">:</span> <span class=\"nb\">float</span> <span class=\"o\">=</span> <span class=\"mi\">0</span>,</span><span class=\"param\">\t<span class=\"n\">j3_deg</span><span class=\"p\">:</span> <span class=\"nb\">float</span> <span class=\"o\">=</span> <span class=\"mi\">0</span>,</span><span class=\"param\">\t<span class=\"n\">j4_deg</span><span class=\"p\">:</span> <span class=\"nb\">float</span> <span class=\"o\">=</span> <span class=\"mi\">0</span>,</span><span class=\"param\">\t<span class=\"n\">j5_deg</span><span class=\"p\">:</span> <span class=\"nb\">float</span> <span class=\"o\">=</span> <span class=\"mi\">0</span>,</span><span class=\"param\">\t<span class=\"n\">j6_deg</span><span class=\"p\">:</span> <span class=\"nb\">float</span> <span class=\"o\">=</span> <span class=\"mi\">0</span></span>)</span>"}, {"fullname": "inovopy.geometry.jointcoord.JointCoord.joint_coord_deg", "modulename": "inovopy.geometry.jointcoord", "qualname": "JointCoord.joint_coord_deg", "kind": "variable", "doc": "<p></p>\n", "annotation": ": list[float]"}, {"fullname": "inovopy.geometry.jointcoord.JointCoord.from_robot", "modulename": "inovopy.geometry.jointcoord", "qualname": "JointCoord.from_robot", "kind": "function", "doc": "<p>Parse Robot input to <code>JointCoord</code></p>\n\n<p>example input:</p>\n\n<p><code>{joints : [-1.545941, -0.087197, -0.111058, -2.998237, 1.762412, 3.399661, ],\ntcp : {rx : -1.793361, ry : 0.255386, rz : 1.682603,\nx : -0.073378, y : -0.014815, z : 0.929764, },\ntcpid : tool_plate, }</code></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">cls</span>, </span><span class=\"param\"><span class=\"n\">res</span><span class=\"p\">:</span> <span class=\"nb\">str</span></span><span class=\"return-annotation\">) -> <span class=\"n\">inovopy</span><span class=\"o\">.</span><span class=\"n\">geometry</span><span class=\"o\">.</span><span class=\"n\">jointcoord</span><span class=\"o\">.</span><span class=\"n\">JointCoord</span>:</span></span>", "funcdef": "def"}, {"fullname": "inovopy.geometry.jointcoord.JointCoord.from_j1", "modulename": "inovopy.geometry.jointcoord", "qualname": "JointCoord.from_j1", "kind": "function", "doc": "<p>Construct a new <code>JointCoord</code> with specified joint 1</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">cls</span>, </span><span class=\"param\"><span class=\"n\">deg</span><span class=\"p\">:</span> <span class=\"nb\">float</span> <span class=\"o\">=</span> <span class=\"mi\">0</span></span><span class=\"return-annotation\">) -> <span class=\"n\">inovopy</span><span class=\"o\">.</span><span class=\"n\">geometry</span><span class=\"o\">.</span><span class=\"n\">jointcoord</span><span class=\"o\">.</span><span class=\"n\">JointCoord</span>:</span></span>", "funcdef": "def"}, {"fullname": "inovopy.geometry.jointcoord.JointCoord.from_j2", "modulename": "inovopy.geometry.jointcoord", "qualname": "JointCoord.from_j2", "kind": "function", "doc": "<p>Construct a new <code>JointCoord</code> with specified joint 2</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">cls</span>, </span><span class=\"param\"><span class=\"n\">deg</span><span class=\"p\">:</span> <span class=\"nb\">float</span> <span class=\"o\">=</span> <span class=\"mi\">0</span></span><span class=\"return-annotation\">) -> <span class=\"n\">inovopy</span><span class=\"o\">.</span><span class=\"n\">geometry</span><span class=\"o\">.</span><span class=\"n\">jointcoord</span><span class=\"o\">.</span><span class=\"n\">JointCoord</span>:</span></span>", "funcdef": "def"}, {"fullname": "inovopy.geometry.jointcoord.JointCoord.from_j3", "modulename": "inovopy.geometry.jointcoord", "qualname": "JointCoord.from_j3", "kind": "function", "doc": "<p>Construct a new <code>JointCoord</code> with specified joint 3</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">cls</span>, </span><span class=\"param\"><span class=\"n\">deg</span><span class=\"p\">:</span> <span class=\"nb\">float</span> <span class=\"o\">=</span> <span class=\"mi\">0</span></span><span class=\"return-annotation\">) -> <span class=\"n\">inovopy</span><span class=\"o\">.</span><span class=\"n\">geometry</span><span class=\"o\">.</span><span class=\"n\">jointcoord</span><span class=\"o\">.</span><span class=\"n\">JointCoord</span>:</span></span>", "funcdef": "def"}, {"fullname": "inovopy.geometry.jointcoord.JointCoord.from_j4", "modulename": "inovopy.geometry.jointcoord", "qualname": "JointCoord.from_j4", "kind": "function", "doc": "<p>Construct a new <code>JointCoord</code> with specified joint 4</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">cls</span>, </span><span class=\"param\"><span class=\"n\">deg</span><span class=\"p\">:</span> <span class=\"nb\">float</span> <span class=\"o\">=</span> <span class=\"mi\">0</span></span><span class=\"return-annotation\">) -> <span class=\"n\">inovopy</span><span class=\"o\">.</span><span class=\"n\">geometry</span><span class=\"o\">.</span><span class=\"n\">jointcoord</span><span class=\"o\">.</span><span class=\"n\">JointCoord</span>:</span></span>", "funcdef": "def"}, {"fullname": "inovopy.geometry.jointcoord.JointCoord.from_j5", "modulename": "inovopy.geometry.jointcoord", "qualname": "JointCoord.from_j5", "kind": "function", "doc": "<p>Construct a new <code>JointCoord</code> with specified joint 5</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">cls</span>, </span><span class=\"param\"><span class=\"n\">deg</span><span class=\"p\">:</span> <span class=\"nb\">float</span> <span class=\"o\">=</span> <span class=\"mi\">0</span></span><span class=\"return-annotation\">) -> <span class=\"n\">inovopy</span><span class=\"o\">.</span><span class=\"n\">geometry</span><span class=\"o\">.</span><span class=\"n\">jointcoord</span><span class=\"o\">.</span><span class=\"n\">JointCoord</span>:</span></span>", "funcdef": "def"}, {"fullname": "inovopy.geometry.jointcoord.JointCoord.from_j6", "modulename": "inovopy.geometry.jointcoord", "qualname": "JointCoord.from_j6", "kind": "function", "doc": "<p>Construct a new <code>JointCoord</code> with specified joint 6</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">cls</span>, </span><span class=\"param\"><span class=\"n\">deg</span><span class=\"p\">:</span> <span class=\"nb\">float</span> <span class=\"o\">=</span> <span class=\"mi\">0</span></span><span class=\"return-annotation\">) -> <span class=\"n\">inovopy</span><span class=\"o\">.</span><span class=\"n\">geometry</span><span class=\"o\">.</span><span class=\"n\">jointcoord</span><span class=\"o\">.</span><span class=\"n\">JointCoord</span>:</span></span>", "funcdef": "def"}, {"fullname": "inovopy.geometry.jointcoord.JointCoord.then_j1", "modulename": "inovopy.geometry.jointcoord", "qualname": "JointCoord.then_j1", "kind": "function", "doc": "<p>Return a new <code>JointCoord</code> with a by roating joint 1</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">deg</span><span class=\"p\">:</span> <span class=\"nb\">float</span> <span class=\"o\">=</span> <span class=\"mi\">0</span></span><span class=\"return-annotation\">) -> <span class=\"n\">inovopy</span><span class=\"o\">.</span><span class=\"n\">geometry</span><span class=\"o\">.</span><span class=\"n\">jointcoord</span><span class=\"o\">.</span><span class=\"n\">JointCoord</span>:</span></span>", "funcdef": "def"}, {"fullname": "inovopy.geometry.jointcoord.JointCoord.then_j2", "modulename": "inovopy.geometry.jointcoord", "qualname": "JointCoord.then_j2", "kind": "function", "doc": "<p>Return a new <code>JointCoord</code> with a by roating joint 2</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">deg</span><span class=\"p\">:</span> <span class=\"nb\">float</span> <span class=\"o\">=</span> <span class=\"mi\">0</span></span><span class=\"return-annotation\">) -> <span class=\"n\">inovopy</span><span class=\"o\">.</span><span class=\"n\">geometry</span><span class=\"o\">.</span><span class=\"n\">jointcoord</span><span class=\"o\">.</span><span class=\"n\">JointCoord</span>:</span></span>", "funcdef": "def"}, {"fullname": "inovopy.geometry.jointcoord.JointCoord.then_j3", "modulename": "inovopy.geometry.jointcoord", "qualname": "JointCoord.then_j3", "kind": "function", "doc": "<p>Return a new <code>JointCoord</code> with a by roating joint 3</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">deg</span><span class=\"p\">:</span> <span class=\"nb\">float</span> <span class=\"o\">=</span> <span class=\"mi\">0</span></span><span class=\"return-annotation\">) -> <span class=\"n\">inovopy</span><span class=\"o\">.</span><span class=\"n\">geometry</span><span class=\"o\">.</span><span class=\"n\">jointcoord</span><span class=\"o\">.</span><span class=\"n\">JointCoord</span>:</span></span>", "funcdef": "def"}, {"fullname": "inovopy.geometry.jointcoord.JointCoord.then_j4", "modulename": "inovopy.geometry.jointcoord", "qualname": "JointCoord.then_j4", "kind": "function", "doc": "<p>Return a new <code>JointCoord</code> with a by roating joint 4</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">deg</span><span class=\"p\">:</span> <span class=\"nb\">float</span> <span class=\"o\">=</span> <span class=\"mi\">0</span></span><span class=\"return-annotation\">) -> <span class=\"n\">inovopy</span><span class=\"o\">.</span><span class=\"n\">geometry</span><span class=\"o\">.</span><span class=\"n\">jointcoord</span><span class=\"o\">.</span><span class=\"n\">JointCoord</span>:</span></span>", "funcdef": "def"}, {"fullname": "inovopy.geometry.jointcoord.JointCoord.then_j5", "modulename": "inovopy.geometry.jointcoord", "qualname": "JointCoord.then_j5", "kind": "function", "doc": "<p>Return a new <code>JointCoord</code> with a by roating joint 5</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">deg</span><span class=\"p\">:</span> <span class=\"nb\">float</span> <span class=\"o\">=</span> <span class=\"mi\">0</span></span><span class=\"return-annotation\">) -> <span class=\"n\">inovopy</span><span class=\"o\">.</span><span class=\"n\">geometry</span><span class=\"o\">.</span><span class=\"n\">jointcoord</span><span class=\"o\">.</span><span class=\"n\">JointCoord</span>:</span></span>", "funcdef": "def"}, {"fullname": "inovopy.geometry.jointcoord.JointCoord.then_j6", "modulename": "inovopy.geometry.jointcoord", "qualname": "JointCoord.then_j6", "kind": "function", "doc": "<p>Return a new <code>JointCoord</code> with a by roating joint 6</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">deg</span><span class=\"p\">:</span> <span class=\"nb\">float</span> <span class=\"o\">=</span> <span class=\"mi\">0</span></span><span class=\"return-annotation\">) -> <span class=\"n\">inovopy</span><span class=\"o\">.</span><span class=\"n\">geometry</span><span class=\"o\">.</span><span class=\"n\">jointcoord</span><span class=\"o\">.</span><span class=\"n\">JointCoord</span>:</span></span>", "funcdef": "def"}, {"fullname": "inovopy.geometry.jointcoord.JointCoord.to_dict", "modulename": "inovopy.geometry.jointcoord", "qualname": "JointCoord.to_dict", "kind": "function", "doc": "<p>return a <code>dict[str,str|float]</code> representation of the <code>JointCoord</code></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">dict</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"nb\">str</span> <span class=\"o\">|</span> <span class=\"nb\">float</span><span class=\"p\">]</span>:</span></span>", "funcdef": "def"}, {"fullname": "inovopy.geometry.jointcoord.JointCoord.from_dict", "modulename": "inovopy.geometry.jointcoord", "qualname": "JointCoord.from_dict", "kind": "function", "doc": "<p>construct a new <code>JointCoord</code> from a dictionary</p>\n\n<h2 id=\"parameter\">Parameter</h2>\n\n<ul>\n<li><code>data: dict[str, str|float]</code>: the data, if field is missing, 0 will be assumed</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">cls</span>,</span><span class=\"param\">\t<span class=\"n\">data</span><span class=\"p\">:</span> <span class=\"nb\">dict</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"nb\">str</span> <span class=\"o\">|</span> <span class=\"nb\">float</span><span class=\"p\">]</span></span><span class=\"return-annotation\">) -> <span class=\"n\">inovopy</span><span class=\"o\">.</span><span class=\"n\">geometry</span><span class=\"o\">.</span><span class=\"n\">jointcoord</span><span class=\"o\">.</span><span class=\"n\">JointCoord</span>:</span></span>", "funcdef": "def"}, {"fullname": "inovopy.geometry.transform", "modulename": "inovopy.geometry.transform", "kind": "module", "doc": "<h1 id=\"transform-module\">Transform Module</h1>\n\n<p>This module provide useful class and function for spatial calculation</p>\n\n<h2 id=\"class\">Class</h2>\n\n<ul>\n<li><code>Transform</code> : A spatial transform represented a translation and rotation</li>\n</ul>\n\n<h2 id=\"function\">Function</h2>\n\n<ul>\n<li><code>deg_to_rad</code> : translate degree to radian</li>\n<li><code>rad_to_deg</code> : translate radian to degree</li>\n<li><code>rx_mat</code> : compute rotation matrx of rotation along x axis</li>\n<li><code>ry_mat</code> : compute rotation matrx of rotation along y axis</li>\n<li><code>rz_mat</code> : compute rotation matrx of rotation along z axis</li>\n<li><code>euler_to_mat</code> : translate euler angle to rotation matrix</li>\n<li><code>mat_to_euler</code> : translate rotation matrix to euler angle</li>\n</ul>\n"}, {"fullname": "inovopy.geometry.transform.rx_mat", "modulename": "inovopy.geometry.transform", "qualname": "rx_mat", "kind": "function", "doc": "<p>compute rotation matrx of rotation along x axis</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">deg</span><span class=\"p\">:</span> <span class=\"nb\">float</span></span><span class=\"return-annotation\">) -> <span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">ndarray</span><span class=\"p\">[</span><span class=\"nb\">tuple</span><span class=\"p\">[</span><span class=\"nb\">int</span><span class=\"p\">,</span> <span class=\"o\">...</span><span class=\"p\">],</span> <span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">dtype</span><span class=\"p\">[</span><span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">float64</span><span class=\"p\">]]</span>:</span></span>", "funcdef": "def"}, {"fullname": "inovopy.geometry.transform.ry_mat", "modulename": "inovopy.geometry.transform", "qualname": "ry_mat", "kind": "function", "doc": "<p>compute rotation matrx of rotation along y axis</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">deg</span><span class=\"p\">:</span> <span class=\"nb\">float</span></span><span class=\"return-annotation\">) -> <span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">ndarray</span><span class=\"p\">[</span><span class=\"nb\">tuple</span><span class=\"p\">[</span><span class=\"nb\">int</span><span class=\"p\">,</span> <span class=\"o\">...</span><span class=\"p\">],</span> <span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">dtype</span><span class=\"p\">[</span><span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">float64</span><span class=\"p\">]]</span>:</span></span>", "funcdef": "def"}, {"fullname": "inovopy.geometry.transform.rz_mat", "modulename": "inovopy.geometry.transform", "qualname": "rz_mat", "kind": "function", "doc": "<p>compute rotation matrx of rotation along z axis</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">deg</span><span class=\"p\">:</span> <span class=\"nb\">float</span></span><span class=\"return-annotation\">) -> <span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">ndarray</span><span class=\"p\">[</span><span class=\"nb\">tuple</span><span class=\"p\">[</span><span class=\"nb\">int</span><span class=\"p\">,</span> <span class=\"o\">...</span><span class=\"p\">],</span> <span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">dtype</span><span class=\"p\">[</span><span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">float64</span><span class=\"p\">]]</span>:</span></span>", "funcdef": "def"}, {"fullname": "inovopy.geometry.transform.euler_to_mat", "modulename": "inovopy.geometry.transform", "qualname": "euler_to_mat", "kind": "function", "doc": "<p>translate euler angle to rotation matrix</p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">euler_deg</span><span class=\"p\">:</span> <span class=\"n\">Tuple</span><span class=\"p\">[</span><span class=\"nb\">float</span><span class=\"p\">,</span> <span class=\"nb\">float</span><span class=\"p\">,</span> <span class=\"nb\">float</span><span class=\"p\">]</span></span><span class=\"return-annotation\">) -> <span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">ndarray</span><span class=\"p\">[</span><span class=\"nb\">tuple</span><span class=\"p\">[</span><span class=\"nb\">int</span><span class=\"p\">,</span> <span class=\"o\">...</span><span class=\"p\">],</span> <span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">dtype</span><span class=\"p\">[</span><span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">float64</span><span class=\"p\">]]</span>:</span></span>", "funcdef": "def"}, {"fullname": "inovopy.geometry.transform.mat_to_euler", "modulename": "inovopy.geometry.transform", "qualname": "mat_to_euler", "kind": "function", "doc": "<p>translate rotation matrix to euler angle</p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">mat</span><span class=\"p\">:</span> <span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">ndarray</span><span class=\"p\">[</span><span class=\"nb\">tuple</span><span class=\"p\">[</span><span class=\"nb\">int</span><span class=\"p\">,</span> <span class=\"o\">...</span><span class=\"p\">],</span> <span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">dtype</span><span class=\"p\">[</span><span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">float64</span><span class=\"p\">]]</span></span><span class=\"return-annotation\">) -> <span class=\"n\">Tuple</span><span class=\"p\">[</span><span class=\"nb\">float</span><span class=\"p\">,</span> <span class=\"nb\">float</span><span class=\"p\">,</span> <span class=\"nb\">float</span><span class=\"p\">]</span>:</span></span>", "funcdef": "def"}, {"fullname": "inovopy.geometry.transform.Transform", "modulename": "inovopy.geometry.transform", "qualname": "Transform", "kind": "class", "doc": "<h1 id=\"transform\">Transform</h1>\n\n<p>A class representing spatial transform,\ncompose of a translation and a rotation</p>\n\n<h2 id=\"representation\">Representation</h2>\n\n<ul>\n<li><code>vec_mm</code> : a 3D vector with unit in mm</li>\n<li><code>euler_deg</code> : a set of euler angle wiht unit in degree</li>\n</ul>\n", "bases": "inovopy.geometry.IntoRobotCommand"}, {"fullname": "inovopy.geometry.transform.Transform.__init__", "modulename": "inovopy.geometry.transform", "qualname": "Transform.__init__", "kind": "function", "doc": "<p>initalize a transform</p>\n\n<h2 id=\"parameter\">Parameter</h2>\n\n<ul>\n<li><code>vec_mm</code> : a 3D vector with unit in mm</li>\n<li><code>euler_deg</code> : a set of euler angle wiht unit in degree</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">vec_mm</span><span class=\"p\">:</span> <span class=\"n\">Tuple</span><span class=\"p\">[</span><span class=\"nb\">float</span><span class=\"p\">,</span> <span class=\"nb\">float</span><span class=\"p\">,</span> <span class=\"nb\">float</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"p\">(</span><span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">)</span>,</span><span class=\"param\">\t<span class=\"n\">euler_deg</span><span class=\"p\">:</span> <span class=\"n\">Tuple</span><span class=\"p\">[</span><span class=\"nb\">float</span><span class=\"p\">,</span> <span class=\"nb\">float</span><span class=\"p\">,</span> <span class=\"nb\">float</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"p\">(</span><span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">)</span></span>)</span>"}, {"fullname": "inovopy.geometry.transform.Transform.vec_mm", "modulename": "inovopy.geometry.transform", "qualname": "Transform.vec_mm", "kind": "variable", "doc": "<p></p>\n", "annotation": ": Tuple[float, float, float]"}, {"fullname": "inovopy.geometry.transform.Transform.euler_deg", "modulename": "inovopy.geometry.transform", "qualname": "Transform.euler_deg", "kind": "variable", "doc": "<p></p>\n", "annotation": ": Tuple[float, float, float]"}, {"fullname": "inovopy.geometry.transform.Transform.clone", "modulename": "inovopy.geometry.transform", "qualname": "Transform.clone", "kind": "function", "doc": "<p>clone the transform</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">) -> <span class=\"n\">inovopy</span><span class=\"o\">.</span><span class=\"n\">geometry</span><span class=\"o\">.</span><span class=\"n\">transform</span><span class=\"o\">.</span><span class=\"n\">Transform</span>:</span></span>", "funcdef": "def"}, {"fullname": "inovopy.geometry.transform.Transform.from_vec", "modulename": "inovopy.geometry.transform", "qualname": "Transform.from_vec", "kind": "function", "doc": "<p>Construct a new <code>Transform</code> from vector componment</p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">cls</span>,</span><span class=\"param\">\t<span class=\"n\">x_mm</span><span class=\"p\">:</span> <span class=\"nb\">float</span> <span class=\"o\">=</span> <span class=\"mi\">0</span>,</span><span class=\"param\">\t<span class=\"n\">y_mm</span><span class=\"p\">:</span> <span class=\"nb\">float</span> <span class=\"o\">=</span> <span class=\"mi\">0</span>,</span><span class=\"param\">\t<span class=\"n\">z_mm</span><span class=\"p\">:</span> <span class=\"nb\">float</span> <span class=\"o\">=</span> <span class=\"mi\">0</span></span><span class=\"return-annotation\">) -> <span class=\"n\">inovopy</span><span class=\"o\">.</span><span class=\"n\">geometry</span><span class=\"o\">.</span><span class=\"n\">transform</span><span class=\"o\">.</span><span class=\"n\">Transform</span>:</span></span>", "funcdef": "def"}, {"fullname": "inovopy.geometry.transform.Transform.from_euler", "modulename": "inovopy.geometry.transform", "qualname": "Transform.from_euler", "kind": "function", "doc": "<p>Construct a new <code>Transform</code> from euler angle set</p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">cls</span>,</span><span class=\"param\">\t<span class=\"n\">rx_deg</span><span class=\"p\">:</span> <span class=\"nb\">float</span> <span class=\"o\">=</span> <span class=\"mi\">0</span>,</span><span class=\"param\">\t<span class=\"n\">ry_deg</span><span class=\"p\">:</span> <span class=\"nb\">float</span> <span class=\"o\">=</span> <span class=\"mi\">0</span>,</span><span class=\"param\">\t<span class=\"n\">rz_deg</span><span class=\"p\">:</span> <span class=\"nb\">float</span> <span class=\"o\">=</span> <span class=\"mi\">0</span></span><span class=\"return-annotation\">) -> <span class=\"n\">inovopy</span><span class=\"o\">.</span><span class=\"n\">geometry</span><span class=\"o\">.</span><span class=\"n\">transform</span><span class=\"o\">.</span><span class=\"n\">Transform</span>:</span></span>", "funcdef": "def"}, {"fullname": "inovopy.geometry.transform.Transform.from_robot", "modulename": "inovopy.geometry.transform", "qualname": "Transform.from_robot", "kind": "function", "doc": "<p>Parse robot transform response into <code>Transform</code></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">cls</span>, </span><span class=\"param\"><span class=\"n\">res</span><span class=\"p\">:</span> <span class=\"nb\">str</span></span><span class=\"return-annotation\">) -> <span class=\"n\">inovopy</span><span class=\"o\">.</span><span class=\"n\">geometry</span><span class=\"o\">.</span><span class=\"n\">transform</span><span class=\"o\">.</span><span class=\"n\">Transform</span>:</span></span>", "funcdef": "def"}, {"fullname": "inovopy.geometry.transform.Transform.vec_only", "modulename": "inovopy.geometry.transform", "qualname": "Transform.vec_only", "kind": "function", "doc": "<p>Extract translation from <code>self</code> and construct a new transfrom</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">) -> <span class=\"n\">inovopy</span><span class=\"o\">.</span><span class=\"n\">geometry</span><span class=\"o\">.</span><span class=\"n\">transform</span><span class=\"o\">.</span><span class=\"n\">Transform</span>:</span></span>", "funcdef": "def"}, {"fullname": "inovopy.geometry.transform.Transform.euler_only", "modulename": "inovopy.geometry.transform", "qualname": "Transform.euler_only", "kind": "function", "doc": "<p>Extract rotation from <code>self</code> and construct a new transfrom</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">) -> <span class=\"n\">inovopy</span><span class=\"o\">.</span><span class=\"n\">geometry</span><span class=\"o\">.</span><span class=\"n\">transform</span><span class=\"o\">.</span><span class=\"n\">Transform</span>:</span></span>", "funcdef": "def"}, {"fullname": "inovopy.geometry.transform.Transform.from_x", "modulename": "inovopy.geometry.transform", "qualname": "Transform.from_x", "kind": "function", "doc": "<p>Construct a new <code>Transform</code> with specified x</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">cls</span>, </span><span class=\"param\"><span class=\"n\">x_mm</span><span class=\"p\">:</span> <span class=\"nb\">float</span></span><span class=\"return-annotation\">) -> <span class=\"n\">inovopy</span><span class=\"o\">.</span><span class=\"n\">geometry</span><span class=\"o\">.</span><span class=\"n\">transform</span><span class=\"o\">.</span><span class=\"n\">Transform</span>:</span></span>", "funcdef": "def"}, {"fullname": "inovopy.geometry.transform.Transform.from_y", "modulename": "inovopy.geometry.transform", "qualname": "Transform.from_y", "kind": "function", "doc": "<p>Construct a new <code>Transform</code> with specified y</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">cls</span>, </span><span class=\"param\"><span class=\"n\">y_mm</span><span class=\"p\">:</span> <span class=\"nb\">float</span></span><span class=\"return-annotation\">) -> <span class=\"n\">inovopy</span><span class=\"o\">.</span><span class=\"n\">geometry</span><span class=\"o\">.</span><span class=\"n\">transform</span><span class=\"o\">.</span><span class=\"n\">Transform</span>:</span></span>", "funcdef": "def"}, {"fullname": "inovopy.geometry.transform.Transform.from_z", "modulename": "inovopy.geometry.transform", "qualname": "Transform.from_z", "kind": "function", "doc": "<p>Construct a new <code>Transform</code> with specified z</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">cls</span>, </span><span class=\"param\"><span class=\"n\">z_mm</span><span class=\"p\">:</span> <span class=\"nb\">float</span></span><span class=\"return-annotation\">) -> <span class=\"n\">inovopy</span><span class=\"o\">.</span><span class=\"n\">geometry</span><span class=\"o\">.</span><span class=\"n\">transform</span><span class=\"o\">.</span><span class=\"n\">Transform</span>:</span></span>", "funcdef": "def"}, {"fullname": "inovopy.geometry.transform.Transform.from_rx", "modulename": "inovopy.geometry.transform", "qualname": "Transform.from_rx", "kind": "function", "doc": "<p>Construct a new <code>Transform</code> with specified rx</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">cls</span>, </span><span class=\"param\"><span class=\"n\">rx_deg</span><span class=\"p\">:</span> <span class=\"nb\">float</span></span><span class=\"return-annotation\">) -> <span class=\"n\">inovopy</span><span class=\"o\">.</span><span class=\"n\">geometry</span><span class=\"o\">.</span><span class=\"n\">transform</span><span class=\"o\">.</span><span class=\"n\">Transform</span>:</span></span>", "funcdef": "def"}, {"fullname": "inovopy.geometry.transform.Transform.from_ry", "modulename": "inovopy.geometry.transform", "qualname": "Transform.from_ry", "kind": "function", "doc": "<p>Construct a new <code>Transform</code> with specified ry</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">cls</span>, </span><span class=\"param\"><span class=\"n\">ry_deg</span><span class=\"p\">:</span> <span class=\"nb\">float</span></span><span class=\"return-annotation\">) -> <span class=\"n\">inovopy</span><span class=\"o\">.</span><span class=\"n\">geometry</span><span class=\"o\">.</span><span class=\"n\">transform</span><span class=\"o\">.</span><span class=\"n\">Transform</span>:</span></span>", "funcdef": "def"}, {"fullname": "inovopy.geometry.transform.Transform.from_rz", "modulename": "inovopy.geometry.transform", "qualname": "Transform.from_rz", "kind": "function", "doc": "<p>Construct a new <code>Transform</code> with specified rz</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">cls</span>, </span><span class=\"param\"><span class=\"n\">rz_deg</span><span class=\"p\">:</span> <span class=\"nb\">float</span></span><span class=\"return-annotation\">) -> <span class=\"n\">inovopy</span><span class=\"o\">.</span><span class=\"n\">geometry</span><span class=\"o\">.</span><span class=\"n\">transform</span><span class=\"o\">.</span><span class=\"n\">Transform</span>:</span></span>", "funcdef": "def"}, {"fullname": "inovopy.geometry.transform.Transform.set_vec", "modulename": "inovopy.geometry.transform", "qualname": "Transform.set_vec", "kind": "function", "doc": "<p>set the vector</p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">x_mm</span><span class=\"p\">:</span> <span class=\"nb\">float</span>,</span><span class=\"param\">\t<span class=\"n\">y_mm</span><span class=\"p\">:</span> <span class=\"nb\">float</span>,</span><span class=\"param\">\t<span class=\"n\">z_mm</span><span class=\"p\">:</span> <span class=\"nb\">float</span></span><span class=\"return-annotation\">) -> <span class=\"n\">inovopy</span><span class=\"o\">.</span><span class=\"n\">geometry</span><span class=\"o\">.</span><span class=\"n\">transform</span><span class=\"o\">.</span><span class=\"n\">Transform</span>:</span></span>", "funcdef": "def"}, {"fullname": "inovopy.geometry.transform.Transform.set_x", "modulename": "inovopy.geometry.transform", "qualname": "Transform.set_x", "kind": "function", "doc": "<p>set the x component to a specified value</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">mm</span><span class=\"p\">:</span> <span class=\"nb\">float</span></span><span class=\"return-annotation\">) -> <span class=\"n\">inovopy</span><span class=\"o\">.</span><span class=\"n\">geometry</span><span class=\"o\">.</span><span class=\"n\">transform</span><span class=\"o\">.</span><span class=\"n\">Transform</span>:</span></span>", "funcdef": "def"}, {"fullname": "inovopy.geometry.transform.Transform.set_y", "modulename": "inovopy.geometry.transform", "qualname": "Transform.set_y", "kind": "function", "doc": "<p>set the y component to a specified value</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">mm</span><span class=\"p\">:</span> <span class=\"nb\">float</span></span><span class=\"return-annotation\">) -> <span class=\"n\">inovopy</span><span class=\"o\">.</span><span class=\"n\">geometry</span><span class=\"o\">.</span><span class=\"n\">transform</span><span class=\"o\">.</span><span class=\"n\">Transform</span>:</span></span>", "funcdef": "def"}, {"fullname": "inovopy.geometry.transform.Transform.set_z", "modulename": "inovopy.geometry.transform", "qualname": "Transform.set_z", "kind": "function", "doc": "<p>set the z component to a specified value</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">mm</span><span class=\"p\">:</span> <span class=\"nb\">float</span></span><span class=\"return-annotation\">) -> <span class=\"n\">inovopy</span><span class=\"o\">.</span><span class=\"n\">geometry</span><span class=\"o\">.</span><span class=\"n\">transform</span><span class=\"o\">.</span><span class=\"n\">Transform</span>:</span></span>", "funcdef": "def"}, {"fullname": "inovopy.geometry.transform.Transform.set_euler", "modulename": "inovopy.geometry.transform", "qualname": "Transform.set_euler", "kind": "function", "doc": "<p>set the euler angle</p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">rx_deg</span><span class=\"p\">:</span> <span class=\"nb\">float</span>,</span><span class=\"param\">\t<span class=\"n\">ry_deg</span><span class=\"p\">:</span> <span class=\"nb\">float</span>,</span><span class=\"param\">\t<span class=\"n\">rz_deg</span><span class=\"p\">:</span> <span class=\"nb\">float</span></span><span class=\"return-annotation\">) -> <span class=\"n\">inovopy</span><span class=\"o\">.</span><span class=\"n\">geometry</span><span class=\"o\">.</span><span class=\"n\">transform</span><span class=\"o\">.</span><span class=\"n\">Transform</span>:</span></span>", "funcdef": "def"}, {"fullname": "inovopy.geometry.transform.Transform.set_rx", "modulename": "inovopy.geometry.transform", "qualname": "Transform.set_rx", "kind": "function", "doc": "<p>set the rx component to a specified value</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">deg</span><span class=\"p\">:</span> <span class=\"nb\">float</span></span><span class=\"return-annotation\">) -> <span class=\"n\">inovopy</span><span class=\"o\">.</span><span class=\"n\">geometry</span><span class=\"o\">.</span><span class=\"n\">transform</span><span class=\"o\">.</span><span class=\"n\">Transform</span>:</span></span>", "funcdef": "def"}, {"fullname": "inovopy.geometry.transform.Transform.set_ry", "modulename": "inovopy.geometry.transform", "qualname": "Transform.set_ry", "kind": "function", "doc": "<p>set the ry component to a specified value</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">deg</span><span class=\"p\">:</span> <span class=\"nb\">float</span></span><span class=\"return-annotation\">) -> <span class=\"n\">inovopy</span><span class=\"o\">.</span><span class=\"n\">geometry</span><span class=\"o\">.</span><span class=\"n\">transform</span><span class=\"o\">.</span><span class=\"n\">Transform</span>:</span></span>", "funcdef": "def"}, {"fullname": "inovopy.geometry.transform.Transform.set_rz", "modulename": "inovopy.geometry.transform", "qualname": "Transform.set_rz", "kind": "function", "doc": "<p>set the rz component to a specified value</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">deg</span><span class=\"p\">:</span> <span class=\"nb\">float</span></span><span class=\"return-annotation\">) -> <span class=\"n\">inovopy</span><span class=\"o\">.</span><span class=\"n\">geometry</span><span class=\"o\">.</span><span class=\"n\">transform</span><span class=\"o\">.</span><span class=\"n\">Transform</span>:</span></span>", "funcdef": "def"}, {"fullname": "inovopy.geometry.transform.Transform.to_homogenous", "modulename": "inovopy.geometry.transform", "qualname": "Transform.to_homogenous", "kind": "function", "doc": "<p>return a homogenous matrix representation of the <code>self</code></p>\n\n<h2 id=\"return\">Return:</h2>\n\n<ul>\n<li><code>np.array</code> : 4x4 homogenous matrix representation of the transform</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">) -> <span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">ndarray</span><span class=\"p\">[</span><span class=\"nb\">tuple</span><span class=\"p\">[</span><span class=\"nb\">int</span><span class=\"p\">,</span> <span class=\"o\">...</span><span class=\"p\">],</span> <span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">dtype</span><span class=\"p\">[</span><span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">float64</span><span class=\"p\">]]</span>:</span></span>", "funcdef": "def"}, {"fullname": "inovopy.geometry.transform.Transform.from_homogenous", "modulename": "inovopy.geometry.transform", "qualname": "Transform.from_homogenous", "kind": "function", "doc": "<p>construct a transform from a <code>np.array</code> 4x4 homogenous matrix</p>\n\n<h2 id=\"parameter\">Parameter:</h2>\n\n<ul>\n<li><code>mat : np.array</code> : 4x4 homogenous matrix representation of the transform</li>\n</ul>\n\n<h2 id=\"return\">Return:</h2>\n\n<ul>\n<li><code>Transform</code></li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">cls</span>,</span><span class=\"param\">\t<span class=\"n\">mat</span><span class=\"p\">:</span> <span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">ndarray</span><span class=\"p\">[</span><span class=\"nb\">tuple</span><span class=\"p\">[</span><span class=\"nb\">int</span><span class=\"p\">,</span> <span class=\"o\">...</span><span class=\"p\">],</span> <span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">dtype</span><span class=\"p\">[</span><span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">float64</span><span class=\"p\">]]</span></span><span class=\"return-annotation\">) -> <span class=\"n\">inovopy</span><span class=\"o\">.</span><span class=\"n\">geometry</span><span class=\"o\">.</span><span class=\"n\">transform</span><span class=\"o\">.</span><span class=\"n\">Transform</span>:</span></span>", "funcdef": "def"}, {"fullname": "inovopy.geometry.transform.Transform.inv", "modulename": "inovopy.geometry.transform", "qualname": "Transform.inv", "kind": "function", "doc": "<p>return the inverse transform of <code>self</code></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">) -> <span class=\"n\">inovopy</span><span class=\"o\">.</span><span class=\"n\">geometry</span><span class=\"o\">.</span><span class=\"n\">transform</span><span class=\"o\">.</span><span class=\"n\">Transform</span>:</span></span>", "funcdef": "def"}, {"fullname": "inovopy.geometry.transform.Transform.then", "modulename": "inovopy.geometry.transform", "qualname": "Transform.then", "kind": "function", "doc": "<p>return a new transform that is apply a transform to <code>self</code></p>\n\n<h2 id=\"parameter\">Parameter</h2>\n\n<ul>\n<li><code>transform</code> : the transform to apply to <code>self</code></li>\n</ul>\n\n<h2 id=\"return\">Return</h2>\n\n<ul>\n<li><code>transform</code> : resulted transform</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">transform</span><span class=\"p\">:</span> <span class=\"n\">inovopy</span><span class=\"o\">.</span><span class=\"n\">geometry</span><span class=\"o\">.</span><span class=\"n\">transform</span><span class=\"o\">.</span><span class=\"n\">Transform</span></span><span class=\"return-annotation\">) -> <span class=\"n\">inovopy</span><span class=\"o\">.</span><span class=\"n\">geometry</span><span class=\"o\">.</span><span class=\"n\">transform</span><span class=\"o\">.</span><span class=\"n\">Transform</span>:</span></span>", "funcdef": "def"}, {"fullname": "inovopy.geometry.transform.Transform.then_x", "modulename": "inovopy.geometry.transform", "qualname": "Transform.then_x", "kind": "function", "doc": "<p>return a new transform that apply translation along x axis to <code>self</code></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">cm</span><span class=\"p\">:</span> <span class=\"nb\">float</span></span><span class=\"return-annotation\">) -> <span class=\"n\">inovopy</span><span class=\"o\">.</span><span class=\"n\">geometry</span><span class=\"o\">.</span><span class=\"n\">transform</span><span class=\"o\">.</span><span class=\"n\">Transform</span>:</span></span>", "funcdef": "def"}, {"fullname": "inovopy.geometry.transform.Transform.then_y", "modulename": "inovopy.geometry.transform", "qualname": "Transform.then_y", "kind": "function", "doc": "<p>return a new transform that apply translation along y axis to <code>self</code></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">cm</span><span class=\"p\">:</span> <span class=\"nb\">float</span></span><span class=\"return-annotation\">) -> <span class=\"n\">inovopy</span><span class=\"o\">.</span><span class=\"n\">geometry</span><span class=\"o\">.</span><span class=\"n\">transform</span><span class=\"o\">.</span><span class=\"n\">Transform</span>:</span></span>", "funcdef": "def"}, {"fullname": "inovopy.geometry.transform.Transform.then_z", "modulename": "inovopy.geometry.transform", "qualname": "Transform.then_z", "kind": "function", "doc": "<p>return a new transform that apply translation along z axis to <code>self</code></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">cm</span><span class=\"p\">:</span> <span class=\"nb\">float</span></span><span class=\"return-annotation\">) -> <span class=\"n\">inovopy</span><span class=\"o\">.</span><span class=\"n\">geometry</span><span class=\"o\">.</span><span class=\"n\">transform</span><span class=\"o\">.</span><span class=\"n\">Transform</span>:</span></span>", "funcdef": "def"}, {"fullname": "inovopy.geometry.transform.Transform.then_rx", "modulename": "inovopy.geometry.transform", "qualname": "Transform.then_rx", "kind": "function", "doc": "<p>return a new transform that apply rotation along x axis to <code>self</code></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">deg</span><span class=\"p\">:</span> <span class=\"nb\">float</span></span><span class=\"return-annotation\">) -> <span class=\"n\">inovopy</span><span class=\"o\">.</span><span class=\"n\">geometry</span><span class=\"o\">.</span><span class=\"n\">transform</span><span class=\"o\">.</span><span class=\"n\">Transform</span>:</span></span>", "funcdef": "def"}, {"fullname": "inovopy.geometry.transform.Transform.then_ry", "modulename": "inovopy.geometry.transform", "qualname": "Transform.then_ry", "kind": "function", "doc": "<p>return a new transform that apply rotation along y axis to <code>self</code></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">deg</span><span class=\"p\">:</span> <span class=\"nb\">float</span></span><span class=\"return-annotation\">) -> <span class=\"n\">inovopy</span><span class=\"o\">.</span><span class=\"n\">geometry</span><span class=\"o\">.</span><span class=\"n\">transform</span><span class=\"o\">.</span><span class=\"n\">Transform</span>:</span></span>", "funcdef": "def"}, {"fullname": "inovopy.geometry.transform.Transform.then_rz", "modulename": "inovopy.geometry.transform", "qualname": "Transform.then_rz", "kind": "function", "doc": "<p>return a new transform that apply rotation along z axis to <code>self</code></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">deg</span><span class=\"p\">:</span> <span class=\"nb\">float</span></span><span class=\"return-annotation\">) -> <span class=\"n\">inovopy</span><span class=\"o\">.</span><span class=\"n\">geometry</span><span class=\"o\">.</span><span class=\"n\">transform</span><span class=\"o\">.</span><span class=\"n\">Transform</span>:</span></span>", "funcdef": "def"}, {"fullname": "inovopy.geometry.transform.Transform.then_relative_to", "modulename": "inovopy.geometry.transform", "qualname": "Transform.then_relative_to", "kind": "function", "doc": "<p>return a new transform that,\napply a transform to <code>self</code> relative to a reference</p>\n\n<h2 id=\"parameter\">Parameter</h2>\n\n<ul>\n<li><code>transform</code> : the transform to apply</li>\n<li><code>reference</code> : the reference of the transfrom</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">transform</span><span class=\"p\">:</span> <span class=\"n\">inovopy</span><span class=\"o\">.</span><span class=\"n\">geometry</span><span class=\"o\">.</span><span class=\"n\">transform</span><span class=\"o\">.</span><span class=\"n\">Transform</span>,</span><span class=\"param\">\t<span class=\"n\">reference</span><span class=\"p\">:</span> <span class=\"n\">inovopy</span><span class=\"o\">.</span><span class=\"n\">geometry</span><span class=\"o\">.</span><span class=\"n\">transform</span><span class=\"o\">.</span><span class=\"n\">Transform</span></span><span class=\"return-annotation\">) -> <span class=\"n\">inovopy</span><span class=\"o\">.</span><span class=\"n\">geometry</span><span class=\"o\">.</span><span class=\"n\">transform</span><span class=\"o\">.</span><span class=\"n\">Transform</span>:</span></span>", "funcdef": "def"}, {"fullname": "inovopy.geometry.transform.Transform.then_relative", "modulename": "inovopy.geometry.transform", "qualname": "Transform.then_relative", "kind": "function", "doc": "<p>return a new transform that apply a transform relative <code>self</code>'s position</p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">transform</span><span class=\"p\">:</span> <span class=\"n\">inovopy</span><span class=\"o\">.</span><span class=\"n\">geometry</span><span class=\"o\">.</span><span class=\"n\">transform</span><span class=\"o\">.</span><span class=\"n\">Transform</span></span><span class=\"return-annotation\">) -> <span class=\"n\">inovopy</span><span class=\"o\">.</span><span class=\"n\">geometry</span><span class=\"o\">.</span><span class=\"n\">transform</span><span class=\"o\">.</span><span class=\"n\">Transform</span>:</span></span>", "funcdef": "def"}, {"fullname": "inovopy.geometry.transform.Transform.then_relative_rx", "modulename": "inovopy.geometry.transform", "qualname": "Transform.then_relative_rx", "kind": "function", "doc": "<p>return a new transform that apply relative rotaion along axis x</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">deg</span><span class=\"p\">:</span> <span class=\"nb\">float</span></span><span class=\"return-annotation\">) -> <span class=\"n\">inovopy</span><span class=\"o\">.</span><span class=\"n\">geometry</span><span class=\"o\">.</span><span class=\"n\">transform</span><span class=\"o\">.</span><span class=\"n\">Transform</span>:</span></span>", "funcdef": "def"}, {"fullname": "inovopy.geometry.transform.Transform.then_relative_ry", "modulename": "inovopy.geometry.transform", "qualname": "Transform.then_relative_ry", "kind": "function", "doc": "<p>return a new transform that apply relative rotaion along axis y</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">deg</span><span class=\"p\">:</span> <span class=\"nb\">float</span></span><span class=\"return-annotation\">) -> <span class=\"n\">inovopy</span><span class=\"o\">.</span><span class=\"n\">geometry</span><span class=\"o\">.</span><span class=\"n\">transform</span><span class=\"o\">.</span><span class=\"n\">Transform</span>:</span></span>", "funcdef": "def"}, {"fullname": "inovopy.geometry.transform.Transform.then_relative_rz", "modulename": "inovopy.geometry.transform", "qualname": "Transform.then_relative_rz", "kind": "function", "doc": "<p>return a new transform that apply relative rotaion along axis z</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">deg</span><span class=\"p\">:</span> <span class=\"nb\">float</span></span><span class=\"return-annotation\">) -> <span class=\"n\">inovopy</span><span class=\"o\">.</span><span class=\"n\">geometry</span><span class=\"o\">.</span><span class=\"n\">transform</span><span class=\"o\">.</span><span class=\"n\">Transform</span>:</span></span>", "funcdef": "def"}, {"fullname": "inovopy.geometry.transform.Transform.to_dict", "modulename": "inovopy.geometry.transform", "qualname": "Transform.to_dict", "kind": "function", "doc": "<p>return a <code>dict[str,str|float]</code> representation of the transform</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">dict</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"nb\">str</span> <span class=\"o\">|</span> <span class=\"nb\">float</span><span class=\"p\">]</span>:</span></span>", "funcdef": "def"}, {"fullname": "inovopy.geometry.transform.Transform.from_dict", "modulename": "inovopy.geometry.transform", "qualname": "Transform.from_dict", "kind": "function", "doc": "<p>construct a new <code>Transform</code> from a dictionary</p>\n\n<h2 id=\"parameter\">Parameter</h2>\n\n<ul>\n<li><code>data: dict[str, str|float]</code>: the data, if field is missing, 0 will be assumed</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">cls</span>,</span><span class=\"param\">\t<span class=\"n\">data</span><span class=\"p\">:</span> <span class=\"nb\">dict</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"nb\">str</span> <span class=\"o\">|</span> <span class=\"nb\">float</span><span class=\"p\">]</span></span><span class=\"return-annotation\">) -> <span class=\"n\">inovopy</span><span class=\"o\">.</span><span class=\"n\">geometry</span><span class=\"o\">.</span><span class=\"n\">transform</span><span class=\"o\">.</span><span class=\"n\">Transform</span>:</span></span>", "funcdef": "def"}, {"fullname": "inovopy.iva", "modulename": "inovopy.iva", "kind": "module", "doc": "<h1 id=\"iva-module\">IVA Module</h1>\n\n<p>This module provide class and function for\nmessage generation of IVA communication protocal to inovo robots</p>\n\n<h2 id=\"functions\">Functions</h2>\n\n<ul>\n<li><code>execute</code> : generate <code>dict</code> for <code>execute</code> message for robot</li>\n<li><code>enqueue</code> : generate <code>dict</code> for <code>enqueue</code> message for robot</li>\n<li><code>dequeue</code> : generate <code>dict</code> for <code>dequeue</code> message for robot</li>\n<li><code>pop</code> : generate <code>dict</code> for <code>pop</code> message for robot</li>\n<li><code>io</code> : generate <code>dict</code> for <code>io</code> message for robot</li>\n<li><code>gripper</code> : generate <code>dict</code> for <code>gripper</code> message for robot</li>\n<li><code>get_current</code> : generate <code>dict</code> for <code>get</code> current message for robot</li>\n<li><code>get_data</code> : generate <code>dict</code> for <code>get</code> data message for robot</li>\n<li><code>custom</code> : generate <code>dict</code> for <code>custom</code> message for robot</li>\n</ul>\n\n<h2 id=\"class\">Class</h2>\n\n<ul>\n<li><code>RobotCommand</code> ; class for constructing robot command</li>\n<li><code>IOCommand</code> ; class for constructing IO command</li>\n<li><code>GripperCommand</code> ; class for constructing gripper command</li>\n</ul>\n\n<h2 id=\"interface-abstract-base-class\">Interface, Abstract Base Class</h2>\n\n<ul>\n<li><code>IntoRobotCommand</code> : interface for class to constructing robot command</li>\n</ul>\n"}, {"fullname": "inovopy.iva.execute", "modulename": "inovopy.iva", "qualname": "execute", "kind": "function", "doc": "<p>generate jsonable <code>dict[str,str|float]</code> for execute command</p>\n\n<h2 id=\"parameter\">Parameter</h2>\n\n<ul>\n<li><code>robot_command : RobotCommand</code> : the robot command to execute</li>\n<li><code>enter_context : bool</code> : whether or not to push to the context stack</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">robot_command</span><span class=\"p\">:</span> <span class=\"n\">inovopy</span><span class=\"o\">.</span><span class=\"n\">iva</span><span class=\"o\">.</span><span class=\"n\">RobotCommand</span>,</span><span class=\"param\">\t<span class=\"n\">enter_context</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">=</span> <span class=\"kc\">False</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">dict</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"nb\">str</span> <span class=\"o\">|</span> <span class=\"nb\">float</span><span class=\"p\">]</span>:</span></span>", "funcdef": "def"}, {"fullname": "inovopy.iva.enqueue", "modulename": "inovopy.iva", "qualname": "enqueue", "kind": "function", "doc": "<p>generate jsonable <code>dict[str,str|float]</code> for enqueue command</p>\n\n<h2 id=\"parameter\">Parameter</h2>\n\n<ul>\n<li><code>robot_command : RobotCommand</code> : the robot command to enqueue</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">robot_command</span><span class=\"p\">:</span> <span class=\"n\">inovopy</span><span class=\"o\">.</span><span class=\"n\">iva</span><span class=\"o\">.</span><span class=\"n\">RobotCommand</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">dict</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"nb\">str</span> <span class=\"o\">|</span> <span class=\"nb\">float</span><span class=\"p\">]</span>:</span></span>", "funcdef": "def"}, {"fullname": "inovopy.iva.dequeue", "modulename": "inovopy.iva", "qualname": "dequeue", "kind": "function", "doc": "<p>generate jsonable <code>dict[str,str|float]</code> for dequeue command</p>\n\n<h2 id=\"parameter\">Parameter</h2>\n\n<ul>\n<li><code>enter_context : bool</code> : whether or not to push to the context stack</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">enter_context</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">=</span> <span class=\"kc\">False</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">dict</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"nb\">str</span> <span class=\"o\">|</span> <span class=\"nb\">float</span><span class=\"p\">]</span>:</span></span>", "funcdef": "def"}, {"fullname": "inovopy.iva.pop", "modulename": "inovopy.iva", "qualname": "pop", "kind": "function", "doc": "<p>generate jsonable <code>dict[str,str|float]</code> for pop command</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"return-annotation\">) -> <span class=\"nb\">dict</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"nb\">str</span> <span class=\"o\">|</span> <span class=\"nb\">float</span><span class=\"p\">]</span>:</span></span>", "funcdef": "def"}, {"fullname": "inovopy.iva.gripper", "modulename": "inovopy.iva", "qualname": "gripper", "kind": "function", "doc": "<p>generate jsonable <code>dict[str,str|float]</code> for gripper command</p>\n\n<h2 id=\"parameter\">Parameter</h2>\n\n<ul>\n<li><code>gripper_command : GripperCommand</code> : gripper command to execute</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">gripper_command</span><span class=\"p\">:</span> <span class=\"n\">inovopy</span><span class=\"o\">.</span><span class=\"n\">iva</span><span class=\"o\">.</span><span class=\"n\">GripperCommand</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">dict</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"nb\">str</span> <span class=\"o\">|</span> <span class=\"nb\">float</span><span class=\"p\">]</span>:</span></span>", "funcdef": "def"}, {"fullname": "inovopy.iva.io", "modulename": "inovopy.iva", "qualname": "io", "kind": "function", "doc": "<p>generate jsonable <code>dict[str,str|float]</code> for io command</p>\n\n<h2 id=\"parameter\">Parameter</h2>\n\n<ul>\n<li><code>io_command : IOCommand</code> : io command to execute</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">io_command</span><span class=\"p\">:</span> <span class=\"n\">inovopy</span><span class=\"o\">.</span><span class=\"n\">iva</span><span class=\"o\">.</span><span class=\"n\">IOCommand</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">dict</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"nb\">str</span> <span class=\"o\">|</span> <span class=\"nb\">float</span><span class=\"p\">]</span>:</span></span>", "funcdef": "def"}, {"fullname": "inovopy.iva.get_current", "modulename": "inovopy.iva", "qualname": "get_current", "kind": "function", "doc": "<p>generate jsonable <code>dict[str,str|float]</code> for get command</p>\n\n<h2 id=\"parameter\">Parameter</h2>\n\n<ul>\n<li><code>transform : bool</code> : whether to get the current transform or joint</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">target</span><span class=\"p\">:</span> <span class=\"n\">Literal</span><span class=\"p\">[</span><span class=\"s1\">&#39;transform&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;joint_coord&#39;</span><span class=\"p\">]</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">dict</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"nb\">str</span> <span class=\"o\">|</span> <span class=\"nb\">float</span><span class=\"p\">]</span>:</span></span>", "funcdef": "def"}, {"fullname": "inovopy.iva.get_data", "modulename": "inovopy.iva", "qualname": "get_data", "kind": "function", "doc": "<p>generate jsonable <code>dict[str,str|float]</code> for get data command</p>\n\n<h2 id=\"parameter\">Parameter</h2>\n\n<ul>\n<li><code>key : str</code> : key of the data to get from the robot</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">key</span><span class=\"p\">:</span> <span class=\"nb\">str</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">dict</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"nb\">str</span> <span class=\"o\">|</span> <span class=\"nb\">float</span><span class=\"p\">]</span>:</span></span>", "funcdef": "def"}, {"fullname": "inovopy.iva.custom", "modulename": "inovopy.iva", "qualname": "custom", "kind": "function", "doc": "<p>generate jsonable <code>dict[str,str|float]</code> for custom command</p>\n\n<h2 id=\"parameter\">Parameter</h2>\n\n<ul>\n<li><code>custom_command : dict[str,str|float]</code> : custom command to execute</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">custom_command</span><span class=\"p\">:</span> <span class=\"nb\">dict</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"nb\">str</span> <span class=\"o\">|</span> <span class=\"nb\">float</span><span class=\"p\">]</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">dict</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"nb\">str</span> <span class=\"o\">|</span> <span class=\"nb\">float</span><span class=\"p\">]</span>:</span></span>", "funcdef": "def"}, {"fullname": "inovopy.iva.RobotCommand", "modulename": "inovopy.iva", "qualname": "RobotCommand", "kind": "class", "doc": "<h1 id=\"robotcommand\">RobotCommand</h1>\n\n<p>a class for constructing robot command</p>\n\n<h2 id=\"class-method\">Class Method</h2>\n\n<ul>\n<li><code>synchronize</code> : command to break blending</li>\n<li><code>sleep</code> : command to robot to sleep</li>\n<li><code>set_parameter</code> : command to set motion parameter of robot</li>\n<li><code>motion</code> : command to move the robot</li>\n</ul>\n"}, {"fullname": "inovopy.iva.RobotCommand.__init__", "modulename": "inovopy.iva", "qualname": "RobotCommand.__init__", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">argument</span><span class=\"p\">:</span> <span class=\"nb\">dict</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"nb\">str</span> <span class=\"o\">|</span> <span class=\"nb\">float</span><span class=\"p\">]</span></span>)</span>"}, {"fullname": "inovopy.iva.RobotCommand.argument", "modulename": "inovopy.iva", "qualname": "RobotCommand.argument", "kind": "variable", "doc": "<p></p>\n", "annotation": ": dict[str, str | float]"}, {"fullname": "inovopy.iva.RobotCommand.to_dict", "modulename": "inovopy.iva", "qualname": "RobotCommand.to_dict", "kind": "function", "doc": "<p>return <code>dict[str,str|float]</code> representation of the command</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">dict</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"nb\">str</span> <span class=\"o\">|</span> <span class=\"nb\">float</span><span class=\"p\">]</span>:</span></span>", "funcdef": "def"}, {"fullname": "inovopy.iva.RobotCommand.synchronize", "modulename": "inovopy.iva", "qualname": "RobotCommand.synchronize", "kind": "function", "doc": "<p>Return a <code>RobotCommand</code> for synchronizing/breaking blending</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">cls</span></span><span class=\"return-annotation\">) -> <span class=\"n\">inovopy</span><span class=\"o\">.</span><span class=\"n\">iva</span><span class=\"o\">.</span><span class=\"n\">RobotCommand</span>:</span></span>", "funcdef": "def"}, {"fullname": "inovopy.iva.RobotCommand.sleep", "modulename": "inovopy.iva", "qualname": "RobotCommand.sleep", "kind": "function", "doc": "<p>Return a <code>RobotCommand</code> for the robot to sleep</p>\n\n<h2 id=\"parameter\">Parameter</h2>\n\n<ul>\n<li><code>second : float</code> : specify the lenght of sleep in seconds</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">cls</span>, </span><span class=\"param\"><span class=\"n\">second</span><span class=\"p\">:</span> <span class=\"nb\">float</span></span><span class=\"return-annotation\">) -> <span class=\"n\">inovopy</span><span class=\"o\">.</span><span class=\"n\">iva</span><span class=\"o\">.</span><span class=\"n\">RobotCommand</span>:</span></span>", "funcdef": "def"}, {"fullname": "inovopy.iva.RobotCommand.set_parameter", "modulename": "inovopy.iva", "qualname": "RobotCommand.set_parameter", "kind": "function", "doc": "<p>Return a <code>RobotCommand</code> for setting the robot motion parameter</p>\n\n<h2 id=\"parameter\">Parameter</h2>\n\n<ul>\n<li><code>speed : float</code>, in percent, range from <code>1</code> to <code>100</code></li>\n<li><code>accel : float</code>, in precent, range from <code>1</code> to <code>100</code></li>\n<li><code>blend_linear : float</code>, in mm, range from <code>1</code> to <code>1000</code></li>\n<li><code>blend_angular : float</code>, in degree, range from <code>1</code> to <code>360</code></li>\n<li><code>tcp_speed_linear : float</code>, in mm, range from <code>1</code> to <code>999</code></li>\n<li><code>tcp_speed_angular : float</code>, in degree, range from <code>1</code> to <code>360</code></li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">cls</span>,</span><span class=\"param\">\t<span class=\"n\">speed</span><span class=\"p\">:</span> <span class=\"nb\">float</span> <span class=\"o\">|</span> <span class=\"kc\">None</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">accel</span><span class=\"p\">:</span> <span class=\"nb\">float</span> <span class=\"o\">|</span> <span class=\"kc\">None</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">blend_linear</span><span class=\"p\">:</span> <span class=\"nb\">float</span> <span class=\"o\">|</span> <span class=\"kc\">None</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">blend_angular</span><span class=\"p\">:</span> <span class=\"nb\">float</span> <span class=\"o\">|</span> <span class=\"kc\">None</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">tcp_speed_linear</span><span class=\"p\">:</span> <span class=\"nb\">float</span> <span class=\"o\">|</span> <span class=\"kc\">None</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">tcp_speed_angular</span><span class=\"p\">:</span> <span class=\"nb\">float</span> <span class=\"o\">|</span> <span class=\"kc\">None</span> <span class=\"o\">=</span> <span class=\"kc\">None</span></span><span class=\"return-annotation\">) -> <span class=\"n\">inovopy</span><span class=\"o\">.</span><span class=\"n\">iva</span><span class=\"o\">.</span><span class=\"n\">RobotCommand</span>:</span></span>", "funcdef": "def"}, {"fullname": "inovopy.iva.RobotCommand.motion", "modulename": "inovopy.iva", "qualname": "RobotCommand.motion", "kind": "function", "doc": "<p>Return a <code>RobotCommand</code> for robot motion</p>\n\n<h2 id=\"parameter\">Parameter</h2>\n\n<ul>\n<li><code>motion_mode : MotionMode</code>, specify the motion mode</li>\n<li><code>target</code> : target of the motion, either transform or joint coord</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">cls</span>,</span><span class=\"param\">\t<span class=\"n\">motion_mode</span><span class=\"p\">:</span> <span class=\"n\">inovopy</span><span class=\"o\">.</span><span class=\"n\">iva</span><span class=\"o\">.</span><span class=\"n\">MotionMode</span>,</span><span class=\"param\">\t<span class=\"n\">target</span><span class=\"p\">:</span> <span class=\"n\">inovopy</span><span class=\"o\">.</span><span class=\"n\">geometry</span><span class=\"o\">.</span><span class=\"n\">jointcoord</span><span class=\"o\">.</span><span class=\"n\">JointCoord</span> <span class=\"o\">|</span> <span class=\"n\">inovopy</span><span class=\"o\">.</span><span class=\"n\">geometry</span><span class=\"o\">.</span><span class=\"n\">transform</span><span class=\"o\">.</span><span class=\"n\">Transform</span></span><span class=\"return-annotation\">) -> <span class=\"n\">inovopy</span><span class=\"o\">.</span><span class=\"n\">iva</span><span class=\"o\">.</span><span class=\"n\">RobotCommand</span>:</span></span>", "funcdef": "def"}, {"fullname": "inovopy.iva.MotionMode", "modulename": "inovopy.iva", "qualname": "MotionMode", "kind": "class", "doc": "<h1 id=\"motionmode\">MotionMode</h1>\n\n<p>An str-enum class for different robot motion's\ninterpolation mode and specify whether is relative move</p>\n\n<h2 id=\"enum\">Enum</h2>\n\n<ul>\n<li><code>LINEAR</code></li>\n<li><code>LINEAR_RELATIVE</code></li>\n<li><code>JOINT</code></li>\n<li><code>JOINT_RELATIVE</code></li>\n</ul>\n", "bases": "builtins.str, enum.Enum"}, {"fullname": "inovopy.iva.MotionMode.LINEAR", "modulename": "inovopy.iva", "qualname": "MotionMode.LINEAR", "kind": "variable", "doc": "<p></p>\n", "default_value": "&lt;MotionMode.LINEAR: &#x27;linear&#x27;&gt;"}, {"fullname": "inovopy.iva.MotionMode.LINEAR_RELATIVE", "modulename": "inovopy.iva", "qualname": "MotionMode.LINEAR_RELATIVE", "kind": "variable", "doc": "<p></p>\n", "default_value": "&lt;MotionMode.LINEAR_RELATIVE: &#x27;linear_relative&#x27;&gt;"}, {"fullname": "inovopy.iva.MotionMode.JOINT", "modulename": "inovopy.iva", "qualname": "MotionMode.JOINT", "kind": "variable", "doc": "<p></p>\n", "default_value": "&lt;MotionMode.JOINT: &#x27;joint&#x27;&gt;"}, {"fullname": "inovopy.iva.MotionMode.JOINT_RELATIVE", "modulename": "inovopy.iva", "qualname": "MotionMode.JOINT_RELATIVE", "kind": "variable", "doc": "<p></p>\n", "default_value": "&lt;MotionMode.JOINT_RELATIVE: &#x27;joint_relatve&#x27;&gt;"}, {"fullname": "inovopy.iva.MotionMode.to_arg", "modulename": "inovopy.iva", "qualname": "MotionMode.to_arg", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">str</span>:</span></span>", "funcdef": "def"}, {"fullname": "inovopy.iva.IOCommand", "modulename": "inovopy.iva", "qualname": "IOCommand", "kind": "class", "doc": "<h1 id=\"io-command\">IO Command</h1>\n\n<p>A class for constructing IO Command</p>\n\n<h2 id=\"class-method\">Class Method</h2>\n\n<ul>\n<li><code>set_beckhoff</code></li>\n<li><code>get_beckhoff</code></li>\n<li><code>set_wrist</code></li>\n<li><code>get_wrist</code></li>\n</ul>\n"}, {"fullname": "inovopy.iva.IOCommand.__init__", "modulename": "inovopy.iva", "qualname": "IOCommand.__init__", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">argument</span><span class=\"p\">:</span> <span class=\"nb\">dict</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"nb\">str</span> <span class=\"o\">|</span> <span class=\"nb\">float</span><span class=\"p\">]</span></span>)</span>"}, {"fullname": "inovopy.iva.IOCommand.argument", "modulename": "inovopy.iva", "qualname": "IOCommand.argument", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "inovopy.iva.IOCommand.to_dict", "modulename": "inovopy.iva", "qualname": "IOCommand.to_dict", "kind": "function", "doc": "<p>return a <code>dict[str,str|float]</code> representation of the io command</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">dict</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"nb\">str</span> <span class=\"o\">|</span> <span class=\"nb\">float</span><span class=\"p\">]</span>:</span></span>", "funcdef": "def"}, {"fullname": "inovopy.iva.IOCommand.set_digital", "modulename": "inovopy.iva", "qualname": "IOCommand.set_digital", "kind": "function", "doc": "<p>return a command for setting the digital output</p>\n\n<h2 id=\"parameter\">Parameter</h2>\n\n<ul>\n<li><code>port : int</code> : port to set</li>\n<li><code>state : bool</code> : state to set</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">cls</span>,</span><span class=\"param\">\t<span class=\"n\">target</span><span class=\"p\">:</span> <span class=\"n\">Literal</span><span class=\"p\">[</span><span class=\"s1\">&#39;beckhoff&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;wrist&#39;</span><span class=\"p\">]</span>,</span><span class=\"param\">\t<span class=\"n\">port</span><span class=\"p\">:</span> <span class=\"nb\">int</span>,</span><span class=\"param\">\t<span class=\"n\">state</span><span class=\"p\">:</span> <span class=\"nb\">bool</span></span><span class=\"return-annotation\">) -> <span class=\"n\">inovopy</span><span class=\"o\">.</span><span class=\"n\">iva</span><span class=\"o\">.</span><span class=\"n\">IOCommand</span>:</span></span>", "funcdef": "def"}, {"fullname": "inovopy.iva.IOCommand.get_digital", "modulename": "inovopy.iva", "qualname": "IOCommand.get_digital", "kind": "function", "doc": "<p>return a command for getting the digital input</p>\n\n<h2 id=\"parameter\">Parameter</h2>\n\n<ul>\n<li><code>port : int</code> : port to set</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">cls</span>,</span><span class=\"param\">\t<span class=\"n\">target</span><span class=\"p\">:</span> <span class=\"n\">Literal</span><span class=\"p\">[</span><span class=\"s1\">&#39;beckhoff&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;wrist&#39;</span><span class=\"p\">]</span>,</span><span class=\"param\">\t<span class=\"n\">port</span><span class=\"p\">:</span> <span class=\"nb\">int</span></span><span class=\"return-annotation\">) -> <span class=\"n\">inovopy</span><span class=\"o\">.</span><span class=\"n\">iva</span><span class=\"o\">.</span><span class=\"n\">IOCommand</span>:</span></span>", "funcdef": "def"}, {"fullname": "inovopy.iva.GripperCommand", "modulename": "inovopy.iva", "qualname": "GripperCommand", "kind": "class", "doc": "<h1 id=\"gripper-command\">Gripper Command</h1>\n\n<p>A class for constructing gripper command</p>\n\n<h2 id=\"class-method\">Class Method</h2>\n\n<ul>\n<li><code>activate</code></li>\n<li><code>set</code></li>\n<li><code>get</code></li>\n</ul>\n"}, {"fullname": "inovopy.iva.GripperCommand.__init__", "modulename": "inovopy.iva", "qualname": "GripperCommand.__init__", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">argument</span><span class=\"p\">:</span> <span class=\"nb\">dict</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"nb\">str</span> <span class=\"o\">|</span> <span class=\"nb\">float</span><span class=\"p\">]</span></span>)</span>"}, {"fullname": "inovopy.iva.GripperCommand.argument", "modulename": "inovopy.iva", "qualname": "GripperCommand.argument", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "inovopy.iva.GripperCommand.to_dict", "modulename": "inovopy.iva", "qualname": "GripperCommand.to_dict", "kind": "function", "doc": "<p>return <code>dict[str,str|float]</code> representation of the command</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">dict</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"nb\">str</span> <span class=\"o\">|</span> <span class=\"nb\">float</span><span class=\"p\">]</span>:</span></span>", "funcdef": "def"}, {"fullname": "inovopy.iva.GripperCommand.activate", "modulename": "inovopy.iva", "qualname": "GripperCommand.activate", "kind": "function", "doc": "<p>return a gripper command for activating the gripper</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">cls</span></span><span class=\"return-annotation\">) -> <span class=\"n\">inovopy</span><span class=\"o\">.</span><span class=\"n\">iva</span><span class=\"o\">.</span><span class=\"n\">GripperCommand</span>:</span></span>", "funcdef": "def"}, {"fullname": "inovopy.iva.GripperCommand.set", "modulename": "inovopy.iva", "qualname": "GripperCommand.set", "kind": "function", "doc": "<p>return a gripper command for setting the gripper</p>\n\n<h1 id=\"parameter\">Parameter</h1>\n\n<ul>\n<li><code>label : str</code> : the label to set the gripper to</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">cls</span>, </span><span class=\"param\"><span class=\"n\">label</span><span class=\"p\">:</span> <span class=\"nb\">str</span></span><span class=\"return-annotation\">) -> <span class=\"n\">inovopy</span><span class=\"o\">.</span><span class=\"n\">iva</span><span class=\"o\">.</span><span class=\"n\">GripperCommand</span>:</span></span>", "funcdef": "def"}, {"fullname": "inovopy.iva.GripperCommand.get", "modulename": "inovopy.iva", "qualname": "GripperCommand.get", "kind": "function", "doc": "<p>return a gripper command for getting the state of the robot</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">cls</span></span><span class=\"return-annotation\">) -> <span class=\"n\">inovopy</span><span class=\"o\">.</span><span class=\"n\">iva</span><span class=\"o\">.</span><span class=\"n\">GripperCommand</span>:</span></span>", "funcdef": "def"}, {"fullname": "inovopy.robot", "modulename": "inovopy.robot", "kind": "module", "doc": "<h1 id=\"robot-module\">Robot Module</h1>\n\n<p>This module provide a simple api for controlling inovo robot arm with\npredefinded <code>iva</code> protocal.</p>\n\n<h2 id=\"class\">Class</h2>\n\n<ul>\n<li><code>InovoRobot</code>: A class for interfacing with inovo robot arm</li>\n</ul>\n\n<h2 id=\"example\">Example</h2>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"kn\">from</span><span class=\"w\"> </span><span class=\"nn\">inovopy.robot</span><span class=\"w\"> </span><span class=\"kn\">import</span> <span class=\"n\">InovoRobot</span>\n\n<span class=\"n\">bot</span> <span class=\"o\">=</span> <span class=\"n\">InovoRobot</span><span class=\"o\">.</span><span class=\"n\">default_iva</span><span class=\"p\">(</span><span class=\"s2\">&quot;psu000&quot;</span><span class=\"p\">)</span>\n</code></pre>\n</div>\n"}, {"fullname": "inovopy.robot.IvaException", "modulename": "inovopy.robot", "qualname": "IvaException", "kind": "class", "doc": "<h1 id=\"iva-exception\">Iva Exception</h1>\n", "bases": "builtins.Exception"}, {"fullname": "inovopy.robot.InovoRobot", "modulename": "inovopy.robot", "qualname": "InovoRobot", "kind": "class", "doc": "<h1 id=\"inovorobot\">InovoRobot</h1>\n\n<p>An API class for controlling and access information from inovo robot arm system.</p>\n\n<h1 id=\"usage\">Usage</h1>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"kn\">from</span><span class=\"w\"> </span><span class=\"nn\">inovopy.robot</span><span class=\"w\"> </span><span class=\"kn\">import</span> <span class=\"n\">InovoRobot</span>\n\n<span class=\"n\">bot</span> <span class=\"o\">=</span> <span class=\"n\">InovoRobot</span><span class=\"o\">.</span><span class=\"n\">default_iva</span><span class=\"p\">(</span><span class=\"s2\">&quot;psu000&quot;</span><span class=\"p\">)</span>\n\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">bot</span><span class=\"o\">.</span><span class=\"n\">get_current_transform</span><span class=\"p\">())</span>\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">bot</span><span class=\"o\">.</span><span class=\"n\">get_current_jointcoord</span><span class=\"p\">())</span>\n</code></pre>\n</div>\n", "bases": "inovopy.util.Loggable"}, {"fullname": "inovopy.robot.InovoRobot.__init__", "modulename": "inovopy.robot", "qualname": "InovoRobot.__init__", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">tcp_stream</span><span class=\"p\">:</span> <span class=\"n\">inovopy</span><span class=\"o\">.</span><span class=\"n\">socket</span><span class=\"o\">.</span><span class=\"n\">tcp_stream</span><span class=\"o\">.</span><span class=\"n\">TcpStream</span>,</span><span class=\"param\">\t<span class=\"n\">inovo_ros</span><span class=\"p\">:</span> <span class=\"n\">inovopy</span><span class=\"o\">.</span><span class=\"n\">rosbridge</span><span class=\"o\">.</span><span class=\"n\">InovoRos</span>,</span><span class=\"param\">\t<span class=\"n\">logger</span><span class=\"p\">:</span> <span class=\"n\">logging</span><span class=\"o\">.</span><span class=\"n\">Logger</span> <span class=\"o\">|</span> <span class=\"nb\">str</span> <span class=\"o\">|</span> <span class=\"kc\">None</span> <span class=\"o\">=</span> <span class=\"kc\">None</span></span>)</span>"}, {"fullname": "inovopy.robot.InovoRobot.tcp_stream", "modulename": "inovopy.robot", "qualname": "InovoRobot.tcp_stream", "kind": "variable", "doc": "<p></p>\n", "annotation": ": inovopy.socket.tcp_stream.TcpStream"}, {"fullname": "inovopy.robot.InovoRobot.inovo_ros", "modulename": "inovopy.robot", "qualname": "InovoRobot.inovo_ros", "kind": "variable", "doc": "<p></p>\n", "annotation": ": inovopy.rosbridge.InovoRos"}, {"fullname": "inovopy.robot.InovoRobot.default_iva", "modulename": "inovopy.robot", "qualname": "InovoRobot.default_iva", "kind": "function", "doc": "<p>start the iva protocal by</p>\n\n<ul>\n<li>start up a tcp listener</li>\n<li>start a sequence on psu via rosbridge</li>\n<li>accept a connection</li>\n</ul>\n\n<h2 id=\"parameter\">Parameter:</h2>\n\n<ul>\n<li><code>host: str</code> : remote host to start sequence, aka psu's address</li>\n</ul>\n\n<h2 id=\"return\">Return:</h2>\n\n<p><code>InovoRobot</code> : the resulted api class</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">cls</span>, </span><span class=\"param\"><span class=\"n\">host</span><span class=\"p\">:</span> <span class=\"nb\">str</span></span><span class=\"return-annotation\">) -> <span class=\"n\">inovopy</span><span class=\"o\">.</span><span class=\"n\">robot</span><span class=\"o\">.</span><span class=\"n\">InovoRobot</span>:</span></span>", "funcdef": "def"}, {"fullname": "inovopy.robot.InovoRobot.read", "modulename": "inovopy.robot", "qualname": "InovoRobot.read", "kind": "function", "doc": "<p>read a line</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">str</span>:</span></span>", "funcdef": "def"}, {"fullname": "inovopy.robot.InovoRobot.write", "modulename": "inovopy.robot", "qualname": "InovoRobot.write", "kind": "function", "doc": "<p>write an instruction as str</p>\n\n<h2 id=\"parameter\">Parameter:</h2>\n\n<ul>\n<li><code>instruction : dict[str, str|float]</code> : jsonable instruction dict</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">instruction</span><span class=\"p\">:</span> <span class=\"nb\">dict</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"nb\">str</span> <span class=\"o\">|</span> <span class=\"nb\">float</span><span class=\"p\">]</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "inovopy.robot.InovoRobot.assert_res_ok", "modulename": "inovopy.robot", "qualname": "InovoRobot.assert_res_ok", "kind": "function", "doc": "<p>read a message and assert that it is <code>OK</code></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "inovopy.robot.InovoRobot.execute", "modulename": "inovopy.robot", "qualname": "InovoRobot.execute", "kind": "function", "doc": "<p>instruct the robot to execute a <code>inovopy.iva.RobotCommand</code></p>\n\n<h2 id=\"parameter\">Parameter:</h2>\n\n<ul>\n<li><code>robot_command: inovopy.iva.RobotCommand</code>: command to execute</li>\n<li><code>enter_context: bool</code>: whether the execution of command create a pop-able context</li>\n</ul>\n\n<h2 id=\"exception\">Exception:</h2>\n\n<p><code>IvaException</code> raise if response is not <code>OK</code></p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">robot_command</span><span class=\"p\">:</span> <span class=\"n\">inovopy</span><span class=\"o\">.</span><span class=\"n\">iva</span><span class=\"o\">.</span><span class=\"n\">RobotCommand</span>,</span><span class=\"param\">\t<span class=\"n\">enter_context</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">=</span> <span class=\"kc\">False</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "inovopy.robot.InovoRobot.sleep", "modulename": "inovopy.robot", "qualname": "InovoRobot.sleep", "kind": "function", "doc": "<p>instruct the robot to sleep for a specified time</p>\n\n<h2 id=\"parameter\">Parameter:</h2>\n\n<ul>\n<li><code>second: float</code> : second to sleep</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">second</span><span class=\"p\">:</span> <span class=\"nb\">float</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "inovopy.robot.InovoRobot.set_param", "modulename": "inovopy.robot", "qualname": "InovoRobot.set_param", "kind": "function", "doc": "<p>set the motion parameter of the robot</p>\n\n<h2 id=\"parameter\">Parameter</h2>\n\n<ul>\n<li><code>speed : float</code>, in percent, range from <code>1</code> to <code>100</code></li>\n<li><code>accel : float</code>, in precent, range from <code>1</code> to <code>100</code></li>\n<li><code>blend_linear : float</code>, in mm, range from <code>1</code> to <code>1000</code></li>\n<li><code>blend_angular : float</code>, in degree, range from <code>1</code> to <code>360</code></li>\n<li><code>tcp_speed_linear : float</code>, in mm, range from <code>1</code> to <code>999</code></li>\n<li><code>tcp_speed_angular : float</code>, in degree, range from <code>1</code> to <code>360</code></li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">speed</span><span class=\"p\">:</span> <span class=\"nb\">float</span> <span class=\"o\">|</span> <span class=\"kc\">None</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">accel</span><span class=\"p\">:</span> <span class=\"nb\">float</span> <span class=\"o\">|</span> <span class=\"kc\">None</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">blend_linear</span><span class=\"p\">:</span> <span class=\"nb\">float</span> <span class=\"o\">|</span> <span class=\"kc\">None</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">blend_angular</span><span class=\"p\">:</span> <span class=\"nb\">float</span> <span class=\"o\">|</span> <span class=\"kc\">None</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">tcp_speed_linear</span><span class=\"p\">:</span> <span class=\"nb\">float</span> <span class=\"o\">|</span> <span class=\"kc\">None</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">tcp_speed_angular</span><span class=\"p\">:</span> <span class=\"nb\">float</span> <span class=\"o\">|</span> <span class=\"kc\">None</span> <span class=\"o\">=</span> <span class=\"kc\">None</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "inovopy.robot.InovoRobot.linear", "modulename": "inovopy.robot", "qualname": "InovoRobot.linear", "kind": "function", "doc": "<p>linear move to a target</p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">target</span><span class=\"p\">:</span> <span class=\"n\">inovopy</span><span class=\"o\">.</span><span class=\"n\">geometry</span><span class=\"o\">.</span><span class=\"n\">transform</span><span class=\"o\">.</span><span class=\"n\">Transform</span> <span class=\"o\">|</span> <span class=\"n\">inovopy</span><span class=\"o\">.</span><span class=\"n\">geometry</span><span class=\"o\">.</span><span class=\"n\">jointcoord</span><span class=\"o\">.</span><span class=\"n\">JointCoord</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "inovopy.robot.InovoRobot.linear_relative", "modulename": "inovopy.robot", "qualname": "InovoRobot.linear_relative", "kind": "function", "doc": "<p>linear relative move to a target</p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">target</span><span class=\"p\">:</span> <span class=\"n\">inovopy</span><span class=\"o\">.</span><span class=\"n\">geometry</span><span class=\"o\">.</span><span class=\"n\">transform</span><span class=\"o\">.</span><span class=\"n\">Transform</span> <span class=\"o\">|</span> <span class=\"n\">inovopy</span><span class=\"o\">.</span><span class=\"n\">geometry</span><span class=\"o\">.</span><span class=\"n\">jointcoord</span><span class=\"o\">.</span><span class=\"n\">JointCoord</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "inovopy.robot.InovoRobot.joint", "modulename": "inovopy.robot", "qualname": "InovoRobot.joint", "kind": "function", "doc": "<p>joint move to a target</p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">target</span><span class=\"p\">:</span> <span class=\"n\">inovopy</span><span class=\"o\">.</span><span class=\"n\">geometry</span><span class=\"o\">.</span><span class=\"n\">transform</span><span class=\"o\">.</span><span class=\"n\">Transform</span> <span class=\"o\">|</span> <span class=\"n\">inovopy</span><span class=\"o\">.</span><span class=\"n\">geometry</span><span class=\"o\">.</span><span class=\"n\">jointcoord</span><span class=\"o\">.</span><span class=\"n\">JointCoord</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "inovopy.robot.InovoRobot.joint_relative", "modulename": "inovopy.robot", "qualname": "InovoRobot.joint_relative", "kind": "function", "doc": "<p>joint relative move to a target</p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">target</span><span class=\"p\">:</span> <span class=\"n\">inovopy</span><span class=\"o\">.</span><span class=\"n\">geometry</span><span class=\"o\">.</span><span class=\"n\">transform</span><span class=\"o\">.</span><span class=\"n\">Transform</span> <span class=\"o\">|</span> <span class=\"n\">inovopy</span><span class=\"o\">.</span><span class=\"n\">geometry</span><span class=\"o\">.</span><span class=\"n\">jointcoord</span><span class=\"o\">.</span><span class=\"n\">JointCoord</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "inovopy.robot.InovoRobot.enqueue", "modulename": "inovopy.robot", "qualname": "InovoRobot.enqueue", "kind": "function", "doc": "<p>instruct the robot to enqueue a command</p>\n\n<h2 id=\"parameter\">Parameter</h2>\n\n<ul>\n<li><code>robot_command: inovopy.iva.RobotCommand</code>: the command to enqueue</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">robot_command</span><span class=\"p\">:</span> <span class=\"n\">inovopy</span><span class=\"o\">.</span><span class=\"n\">iva</span><span class=\"o\">.</span><span class=\"n\">RobotCommand</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "inovopy.robot.InovoRobot.dequeue", "modulename": "inovopy.robot", "qualname": "InovoRobot.dequeue", "kind": "function", "doc": "<p>instruct the robot to dequeue all enqueued command</p>\n\n<h2 id=\"parameter\">Parameter</h2>\n\n<ul>\n<li><code>enter_context: bool</code>: whether enter a context with the sequence or not</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">enter_context</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">=</span> <span class=\"kc\">False</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "inovopy.robot.InovoRobot.sequence", "modulename": "inovopy.robot", "qualname": "InovoRobot.sequence", "kind": "function", "doc": "<p>perform a sequence of <code>inovopy.iva.RobotCommand</code></p>\n\n<h2 id=\"parameter\">Parameter</h2>\n\n<ul>\n<li><code>enter_context: bool</code>: whether enter a context with the sequence or not</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">sequence</span><span class=\"p\">:</span> <span class=\"nb\">list</span><span class=\"p\">[</span><span class=\"n\">inovopy</span><span class=\"o\">.</span><span class=\"n\">iva</span><span class=\"o\">.</span><span class=\"n\">RobotCommand</span><span class=\"p\">]</span>,</span><span class=\"param\">\t<span class=\"n\">enter_context</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">=</span> <span class=\"kc\">False</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "inovopy.robot.InovoRobot.pop", "modulename": "inovopy.robot", "qualname": "InovoRobot.pop", "kind": "function", "doc": "<p>exit a context</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "inovopy.robot.InovoRobot.io", "modulename": "inovopy.robot", "qualname": "InovoRobot.io", "kind": "function", "doc": "<p>instruct the robot to perform a <code>inovopy.iva.IOCommand</code></p>\n\n<h2 id=\"parameter\">Parameter</h2>\n\n<ul>\n<li><code>io_command: inovopy.iva.IOCommand</code>: io commmand to perform</li>\n</ul>\n\n<h2 id=\"return\">Return</h2>\n\n<p><code>str</code> the respons</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">io_command</span><span class=\"p\">:</span> <span class=\"n\">inovopy</span><span class=\"o\">.</span><span class=\"n\">iva</span><span class=\"o\">.</span><span class=\"n\">IOCommand</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "inovopy.robot.InovoRobot.get_io_beckhoff", "modulename": "inovopy.robot", "qualname": "InovoRobot.get_io_beckhoff", "kind": "function", "doc": "<p>get beckhoff input port</p>\n\n<h2 id=\"parameter\">Parameter</h2>\n\n<ul>\n<li><code>port: int</code>: input port to get, default <code>0-7</code></li>\n</ul>\n\n<h2 id=\"return\">Return</h2>\n\n<p><code>bool</code> state of io</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">port</span><span class=\"p\">:</span> <span class=\"nb\">int</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">bool</span>:</span></span>", "funcdef": "def"}, {"fullname": "inovopy.robot.InovoRobot.get_io_wrist", "modulename": "inovopy.robot", "qualname": "InovoRobot.get_io_wrist", "kind": "function", "doc": "<p>get wrist input port</p>\n\n<h2 id=\"parameter\">Parameter</h2>\n\n<ul>\n<li><code>port: int</code>: input port to get, default <code>0-1</code></li>\n</ul>\n\n<h2 id=\"return\">Return</h2>\n\n<p><code>bool</code> state of io</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">port</span><span class=\"p\">:</span> <span class=\"nb\">int</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">bool</span>:</span></span>", "funcdef": "def"}, {"fullname": "inovopy.robot.InovoRobot.set_io_beckhoff", "modulename": "inovopy.robot", "qualname": "InovoRobot.set_io_beckhoff", "kind": "function", "doc": "<p>set beckhoff output port</p>\n\n<h2 id=\"parameter\">Parameter</h2>\n\n<ul>\n<li><code>port: int</code>: output port to set, default <code>0-7</code></li>\n<li><code>state: bool</code>: target state of the output</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">port</span><span class=\"p\">:</span> <span class=\"nb\">int</span>, </span><span class=\"param\"><span class=\"n\">state</span><span class=\"p\">:</span> <span class=\"nb\">bool</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "inovopy.robot.InovoRobot.set_io_wrist", "modulename": "inovopy.robot", "qualname": "InovoRobot.set_io_wrist", "kind": "function", "doc": "<p>set wrist output port</p>\n\n<h2 id=\"parameter\">Parameter</h2>\n\n<ul>\n<li><code>port: int</code>: output port to set, default <code>0-7</code></li>\n<li><code>state: bool</code>: target state of the output</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">port</span><span class=\"p\">:</span> <span class=\"nb\">int</span>, </span><span class=\"param\"><span class=\"n\">state</span><span class=\"p\">:</span> <span class=\"nb\">bool</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "inovopy.robot.InovoRobot.gripper", "modulename": "inovopy.robot", "qualname": "InovoRobot.gripper", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">gripper_command</span><span class=\"p\">:</span> <span class=\"n\">inovopy</span><span class=\"o\">.</span><span class=\"n\">iva</span><span class=\"o\">.</span><span class=\"n\">GripperCommand</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "inovopy.robot.InovoRobot.gipper_activate", "modulename": "inovopy.robot", "qualname": "InovoRobot.gipper_activate", "kind": "function", "doc": "<p>activate the gripper</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "inovopy.robot.InovoRobot.gripper_get", "modulename": "inovopy.robot", "qualname": "InovoRobot.gripper_get", "kind": "function", "doc": "<p>get the gripper width</p>\n\n<h2 id=\"return\">Return</h2>\n\n<p><code>float</code> in percentage</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">float</span>:</span></span>", "funcdef": "def"}, {"fullname": "inovopy.robot.InovoRobot.gripper_set", "modulename": "inovopy.robot", "qualname": "InovoRobot.gripper_set", "kind": "function", "doc": "<p>set a gripper to a predefine label</p>\n\n<h1 id=\"parameter\">Parameter</h1>\n\n<ul>\n<li><code>label: str</code>: the label to set to</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">label</span><span class=\"p\">:</span> <span class=\"nb\">str</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "inovopy.robot.InovoRobot.get_current_transform", "modulename": "inovopy.robot", "qualname": "InovoRobot.get_current_transform", "kind": "function", "doc": "<p>get the current transform</p>\n\n<h2 id=\"return\">Return:</h2>\n\n<p><code>inovopy.geometry.transform.Transform</code> : current tranform</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">) -> <span class=\"n\">inovopy</span><span class=\"o\">.</span><span class=\"n\">geometry</span><span class=\"o\">.</span><span class=\"n\">transform</span><span class=\"o\">.</span><span class=\"n\">Transform</span>:</span></span>", "funcdef": "def"}, {"fullname": "inovopy.robot.InovoRobot.get_current_joint", "modulename": "inovopy.robot", "qualname": "InovoRobot.get_current_joint", "kind": "function", "doc": "<p>get the current joint coordinate</p>\n\n<h2 id=\"return\">Return:</h2>\n\n<p><code>inovopy.geometry.jointcoord.JointCoord</code>: current joint coordinate</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">) -> <span class=\"n\">inovopy</span><span class=\"o\">.</span><span class=\"n\">geometry</span><span class=\"o\">.</span><span class=\"n\">jointcoord</span><span class=\"o\">.</span><span class=\"n\">JointCoord</span>:</span></span>", "funcdef": "def"}, {"fullname": "inovopy.robot.InovoRobot.get_data", "modulename": "inovopy.robot", "qualname": "InovoRobot.get_data", "kind": "function", "doc": "<p>get data with a key</p>\n\n<h2 id=\"parameter\">Parameter:</h2>\n\n<ul>\n<li><code>key : str</code> : key for the data</li>\n</ul>\n\n<h2 id=\"return\">Return:</h2>\n\n<ul>\n<li><code>str</code> value of the data</li>\n<li><code>str</code> containing <code>Error</code> will return if the key is not found</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">key</span><span class=\"p\">:</span> <span class=\"nb\">str</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">str</span>:</span></span>", "funcdef": "def"}, {"fullname": "inovopy.robot.InovoRobot.context", "modulename": "inovopy.robot", "qualname": "InovoRobot.context", "kind": "function", "doc": "<p>enter a context with a robot command</p>\n\n<h2 id=\"parameter\">Parameter</h2>\n\n<ul>\n<li><code>robot_command: inovopy.iva.RobotCommand</code> : the command to execute</li>\n</ul>\n\n<h2 id=\"context-manager\">Context Manager</h2>\n\n<p>when exit context <code>InovoRobot.pop</code> the context</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">robot_command</span><span class=\"p\">:</span> <span class=\"n\">inovopy</span><span class=\"o\">.</span><span class=\"n\">iva</span><span class=\"o\">.</span><span class=\"n\">RobotCommand</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "inovopy.robot.InovoRobot.context_sequence", "modulename": "inovopy.robot", "qualname": "InovoRobot.context_sequence", "kind": "function", "doc": "<p>enter a context with a robot command</p>\n\n<h2 id=\"parameter\">Parameter</h2>\n\n<ul>\n<li><code>sequence: list[inovopy.iva.RobotCommand]</code> : the sequence to execute</li>\n</ul>\n\n<h2 id=\"context-manager\">Context Manager</h2>\n\n<p>when exit context <code>InovoRobot.pop</code> the context</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">sequence</span><span class=\"p\">:</span> <span class=\"nb\">list</span><span class=\"p\">[</span><span class=\"n\">inovopy</span><span class=\"o\">.</span><span class=\"n\">iva</span><span class=\"o\">.</span><span class=\"n\">RobotCommand</span><span class=\"p\">]</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "inovopy.rosbridge", "modulename": "inovopy.rosbridge", "kind": "module", "doc": "<h1 id=\"ros-bridge-module\">Ros Bridge Module</h1>\n\n<p>This module contain function and class for using rosbridge\napi to command and get state from inovo arm</p>\n\n<h2 id=\"class\">Class</h2>\n"}, {"fullname": "inovopy.rosbridge.TOPIC_TCP_SPEED", "modulename": "inovopy.rosbridge", "qualname": "TOPIC_TCP_SPEED", "kind": "variable", "doc": "<p></p>\n", "default_value": "&#x27;/default_move_group/tcp_speed&#x27;"}, {"fullname": "inovopy.rosbridge.TOPIC_TCP_POSE", "modulename": "inovopy.rosbridge", "qualname": "TOPIC_TCP_POSE", "kind": "variable", "doc": "<p></p>\n", "default_value": "&#x27;/default_move_group/tcp_pose&#x27;"}, {"fullname": "inovopy.rosbridge.TOPIC_JOINT_STATE", "modulename": "inovopy.rosbridge", "qualname": "TOPIC_JOINT_STATE", "kind": "variable", "doc": "<p></p>\n", "default_value": "&#x27;/robot/joint_states&#x27;"}, {"fullname": "inovopy.rosbridge.TOPIC_POWER_STATUS", "modulename": "inovopy.rosbridge", "qualname": "TOPIC_POWER_STATUS", "kind": "variable", "doc": "<p></p>\n", "default_value": "&#x27;/psu/status&#x27;"}, {"fullname": "inovopy.rosbridge.TOPIC_ROBOT_STATUS", "modulename": "inovopy.rosbridge", "qualname": "TOPIC_ROBOT_STATUS", "kind": "variable", "doc": "<p></p>\n", "default_value": "&#x27;/robot/robot_state&#x27;"}, {"fullname": "inovopy.rosbridge.TOPIC_ESTOP_STATUS", "modulename": "inovopy.rosbridge", "qualname": "TOPIC_ESTOP_STATUS", "kind": "variable", "doc": "<p></p>\n", "default_value": "&#x27;/psu/estop/state&#x27;"}, {"fullname": "inovopy.rosbridge.TOPIC_SAFE_STOP_STATUS", "modulename": "inovopy.rosbridge", "qualname": "TOPIC_SAFE_STOP_STATUS", "kind": "variable", "doc": "<p></p>\n", "default_value": "&#x27;/psu/safe_stop/state&#x27;"}, {"fullname": "inovopy.rosbridge.TOPIC_RUNTIME_STATE", "modulename": "inovopy.rosbridge", "qualname": "TOPIC_RUNTIME_STATE", "kind": "variable", "doc": "<p></p>\n", "default_value": "&#x27;/sequence/runtime_state&#x27;"}, {"fullname": "inovopy.rosbridge.TYPE_TCP_SPEED", "modulename": "inovopy.rosbridge", "qualname": "TYPE_TCP_SPEED", "kind": "variable", "doc": "<p></p>\n", "default_value": "&#x27;commander_msgs/SpeedStamped&#x27;"}, {"fullname": "inovopy.rosbridge.TYPE_TCP_POSE", "modulename": "inovopy.rosbridge", "qualname": "TYPE_TCP_POSE", "kind": "variable", "doc": "<p></p>\n", "default_value": "&#x27;geometry_msgs/PoseStamped&#x27;"}, {"fullname": "inovopy.rosbridge.TYPE_JOINT_STATE", "modulename": "inovopy.rosbridge", "qualname": "TYPE_JOINT_STATE", "kind": "variable", "doc": "<p></p>\n", "default_value": "&#x27;sensor_msgs/JointState&#x27;"}, {"fullname": "inovopy.rosbridge.TYPE_POWER_STATUS", "modulename": "inovopy.rosbridge", "qualname": "TYPE_POWER_STATUS", "kind": "variable", "doc": "<p></p>\n", "default_value": "&#x27;psu_msgs/Status&#x27;"}, {"fullname": "inovopy.rosbridge.TYPE_ROBOT_STATUS", "modulename": "inovopy.rosbridge", "qualname": "TYPE_ROBOT_STATUS", "kind": "variable", "doc": "<p></p>\n", "default_value": "&#x27;arm_msgs/RobotState&#x27;"}, {"fullname": "inovopy.rosbridge.TYPE_ESTOP_STATUS", "modulename": "inovopy.rosbridge", "qualname": "TYPE_ESTOP_STATUS", "kind": "variable", "doc": "<p></p>\n", "default_value": "&#x27;psu_msgs/SafetyCircuitState&#x27;"}, {"fullname": "inovopy.rosbridge.TYPE_SAFE_STOP_STATUS", "modulename": "inovopy.rosbridge", "qualname": "TYPE_SAFE_STOP_STATUS", "kind": "variable", "doc": "<p></p>\n", "default_value": "&#x27;psu_msgs/SafetyCircuitState&#x27;"}, {"fullname": "inovopy.rosbridge.TYPE_RUNTIME_STATE", "modulename": "inovopy.rosbridge", "qualname": "TYPE_RUNTIME_STATE", "kind": "variable", "doc": "<p></p>\n", "default_value": "&#x27;commander_msgs/RuntimeState&#x27;"}, {"fullname": "inovopy.rosbridge.SERVICE_SAFE_STOP_RESET", "modulename": "inovopy.rosbridge", "qualname": "SERVICE_SAFE_STOP_RESET", "kind": "variable", "doc": "<p></p>\n", "default_value": "&#x27;/psu/safe_stop/reset&#x27;"}, {"fullname": "inovopy.rosbridge.SERVICE_ESTOP_RESET", "modulename": "inovopy.rosbridge", "qualname": "SERVICE_ESTOP_RESET", "kind": "variable", "doc": "<p></p>\n", "default_value": "&#x27;/psu/estop/reset&#x27;"}, {"fullname": "inovopy.rosbridge.SERVICE_POWER_ON", "modulename": "inovopy.rosbridge", "qualname": "SERVICE_POWER_ON", "kind": "variable", "doc": "<p></p>\n", "default_value": "&#x27;/psu/enable&#x27;"}, {"fullname": "inovopy.rosbridge.SERVICE_POWER_OFF", "modulename": "inovopy.rosbridge", "qualname": "SERVICE_POWER_OFF", "kind": "variable", "doc": "<p></p>\n", "default_value": "&#x27;/psu/disable&#x27;"}, {"fullname": "inovopy.rosbridge.SERVICE_ROBOT_ENABLE", "modulename": "inovopy.rosbridge", "qualname": "SERVICE_ROBOT_ENABLE", "kind": "variable", "doc": "<p></p>\n", "default_value": "&#x27;/robot/enable&#x27;"}, {"fullname": "inovopy.rosbridge.SERVICE_ROBOT_DISABLE", "modulename": "inovopy.rosbridge", "qualname": "SERVICE_ROBOT_DISABLE", "kind": "variable", "doc": "<p></p>\n", "default_value": "&#x27;/robot/disable&#x27;"}, {"fullname": "inovopy.rosbridge.SERVICE_SEQUENCE_START", "modulename": "inovopy.rosbridge", "qualname": "SERVICE_SEQUENCE_START", "kind": "variable", "doc": "<p></p>\n", "default_value": "&#x27;/sequence/start&#x27;"}, {"fullname": "inovopy.rosbridge.SERVICE_SEQUENCE_STOP", "modulename": "inovopy.rosbridge", "qualname": "SERVICE_SEQUENCE_STOP", "kind": "variable", "doc": "<p></p>\n", "default_value": "&#x27;/sequence/stop&#x27;"}, {"fullname": "inovopy.rosbridge.SERVICE_SEQUENCE_PAUSE", "modulename": "inovopy.rosbridge", "qualname": "SERVICE_SEQUENCE_PAUSE", "kind": "variable", "doc": "<p></p>\n", "default_value": "&#x27;/sequence/pause&#x27;"}, {"fullname": "inovopy.rosbridge.SERVICE_SEQUENCE_STEP", "modulename": "inovopy.rosbridge", "qualname": "SERVICE_SEQUENCE_STEP", "kind": "variable", "doc": "<p></p>\n", "default_value": "&#x27;/sequence/step&#x27;"}, {"fullname": "inovopy.rosbridge.SERVICE_SEQUENCE_DEBUG", "modulename": "inovopy.rosbridge", "qualname": "SERVICE_SEQUENCE_DEBUG", "kind": "variable", "doc": "<p></p>\n", "default_value": "&#x27;/sequence/debug&#x27;"}, {"fullname": "inovopy.rosbridge.SERVICE_SEQUENCE_CONTINUE", "modulename": "inovopy.rosbridge", "qualname": "SERVICE_SEQUENCE_CONTINUE", "kind": "variable", "doc": "<p></p>\n", "default_value": "&#x27;/sequence/continue&#x27;"}, {"fullname": "inovopy.rosbridge.SERVICE_SEQUENCE_SET_VAR", "modulename": "inovopy.rosbridge", "qualname": "SERVICE_SEQUENCE_SET_VAR", "kind": "variable", "doc": "<p></p>\n", "default_value": "&#x27;/sequence/set_var&#x27;"}, {"fullname": "inovopy.rosbridge.SERVICE_SEQUENCE_GET_VAR", "modulename": "inovopy.rosbridge", "qualname": "SERVICE_SEQUENCE_GET_VAR", "kind": "variable", "doc": "<p></p>\n", "default_value": "&#x27;/sequence/get_var&#x27;"}, {"fullname": "inovopy.rosbridge.TYPE_TRIGGER", "modulename": "inovopy.rosbridge", "qualname": "TYPE_TRIGGER", "kind": "variable", "doc": "<p></p>\n", "default_value": "&#x27;std_srvs/Trigger&#x27;"}, {"fullname": "inovopy.rosbridge.TYPE_RUN_SEQUENCE", "modulename": "inovopy.rosbridge", "qualname": "TYPE_RUN_SEQUENCE", "kind": "variable", "doc": "<p></p>\n", "default_value": "&#x27;commander_msgs/RunSequence&#x27;"}, {"fullname": "inovopy.rosbridge.TYPE_SET_VAR", "modulename": "inovopy.rosbridge", "qualname": "TYPE_SET_VAR", "kind": "variable", "doc": "<p></p>\n", "default_value": "&#x27;commander_msgs/set_var&#x27;"}, {"fullname": "inovopy.rosbridge.TYPE_GET_VAR", "modulename": "inovopy.rosbridge", "qualname": "TYPE_GET_VAR", "kind": "variable", "doc": "<p></p>\n", "default_value": "&#x27;commander_msgs/get_var&#x27;"}, {"fullname": "inovopy.rosbridge.TOPIC_CARTESIAN_JOG", "modulename": "inovopy.rosbridge", "qualname": "TOPIC_CARTESIAN_JOG", "kind": "variable", "doc": "<p></p>\n", "default_value": "&#x27;/default_move_group/cartesian_jog&#x27;"}, {"fullname": "inovopy.rosbridge.TYPE_CARTESIAN_JOG_DEMAND", "modulename": "inovopy.rosbridge", "qualname": "TYPE_CARTESIAN_JOG_DEMAND", "kind": "variable", "doc": "<p></p>\n", "default_value": "&#x27;commander_msgs/CartesianJogDemand&#x27;"}, {"fullname": "inovopy.rosbridge.RuntimeState", "modulename": "inovopy.rosbridge", "qualname": "RuntimeState", "kind": "class", "doc": "<p></p>\n", "bases": "enum.Enum"}, {"fullname": "inovopy.rosbridge.RuntimeState.Idle", "modulename": "inovopy.rosbridge", "qualname": "RuntimeState.Idle", "kind": "variable", "doc": "<p></p>\n", "default_value": "&lt;RuntimeState.Idle: 0&gt;"}, {"fullname": "inovopy.rosbridge.RuntimeState.Running", "modulename": "inovopy.rosbridge", "qualname": "RuntimeState.Running", "kind": "variable", "doc": "<p></p>\n", "default_value": "&lt;RuntimeState.Running: 1&gt;"}, {"fullname": "inovopy.rosbridge.RuntimeState.Paused", "modulename": "inovopy.rosbridge", "qualname": "RuntimeState.Paused", "kind": "variable", "doc": "<p></p>\n", "default_value": "&lt;RuntimeState.Paused: 2&gt;"}, {"fullname": "inovopy.rosbridge.RuntimeState.PausedOnError", "modulename": "inovopy.rosbridge", "qualname": "RuntimeState.PausedOnError", "kind": "variable", "doc": "<p></p>\n", "default_value": "&lt;RuntimeState.PausedOnError: 3&gt;"}, {"fullname": "inovopy.rosbridge.Variable", "modulename": "inovopy.rosbridge", "qualname": "Variable", "kind": "class", "doc": "<p></p>\n"}, {"fullname": "inovopy.rosbridge.Variable.__init__", "modulename": "inovopy.rosbridge", "qualname": "Variable.__init__", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">name</span><span class=\"p\">:</span> <span class=\"nb\">str</span>, </span><span class=\"param\"><span class=\"n\">dtype</span><span class=\"p\">:</span> <span class=\"nb\">str</span>, </span><span class=\"param\"><span class=\"n\">value</span><span class=\"p\">:</span> <span class=\"nb\">str</span></span>)</span>"}, {"fullname": "inovopy.rosbridge.Variable.name", "modulename": "inovopy.rosbridge", "qualname": "Variable.name", "kind": "variable", "doc": "<p></p>\n", "annotation": ": str"}, {"fullname": "inovopy.rosbridge.Variable.dtype", "modulename": "inovopy.rosbridge", "qualname": "Variable.dtype", "kind": "variable", "doc": "<p></p>\n", "annotation": ": str"}, {"fullname": "inovopy.rosbridge.Variable.value", "modulename": "inovopy.rosbridge", "qualname": "Variable.value", "kind": "variable", "doc": "<p></p>\n", "annotation": ": str"}, {"fullname": "inovopy.rosbridge.Variable.from_message", "modulename": "inovopy.rosbridge", "qualname": "Variable.from_message", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">cls</span>, </span><span class=\"param\"><span class=\"n\">message</span></span><span class=\"return-annotation\">) -> <span class=\"n\">inovopy</span><span class=\"o\">.</span><span class=\"n\">rosbridge</span><span class=\"o\">.</span><span class=\"n\">Variable</span>:</span></span>", "funcdef": "def"}, {"fullname": "inovopy.rosbridge.InovoServiceResponse", "modulename": "inovopy.rosbridge", "qualname": "InovoServiceResponse", "kind": "class", "doc": "<p>Response when calling service</p>\n\n<p>Field:</p>\n\n<ul>\n<li><code>success : bool</code> : whether the service call success</li>\n<li><code>message : str</code> : message from service call, usually error message</li>\n<li><code>value : str | None</code> : extra information from response, used in <code>runtime_get_var</code></li>\n</ul>\n"}, {"fullname": "inovopy.rosbridge.InovoServiceResponse.__init__", "modulename": "inovopy.rosbridge", "qualname": "InovoServiceResponse.__init__", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">message</span><span class=\"p\">:</span> <span class=\"nb\">dict</span></span>)</span>"}, {"fullname": "inovopy.rosbridge.InovoServiceResponse.success", "modulename": "inovopy.rosbridge", "qualname": "InovoServiceResponse.success", "kind": "variable", "doc": "<p></p>\n", "annotation": ": bool"}, {"fullname": "inovopy.rosbridge.InovoServiceResponse.message", "modulename": "inovopy.rosbridge", "qualname": "InovoServiceResponse.message", "kind": "variable", "doc": "<p></p>\n", "annotation": ": str"}, {"fullname": "inovopy.rosbridge.InovoServiceResponse.value", "modulename": "inovopy.rosbridge", "qualname": "InovoServiceResponse.value", "kind": "variable", "doc": "<p></p>\n", "annotation": ": str | None"}, {"fullname": "inovopy.rosbridge.InovoServiceResponse.from_message", "modulename": "inovopy.rosbridge", "qualname": "InovoServiceResponse.from_message", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">cls</span>, </span><span class=\"param\"><span class=\"n\">message</span></span><span class=\"return-annotation\">) -> <span class=\"n\">inovopy</span><span class=\"o\">.</span><span class=\"n\">rosbridge</span><span class=\"o\">.</span><span class=\"n\">InovoServiceResponse</span>:</span></span>", "funcdef": "def"}, {"fullname": "inovopy.rosbridge.InovoRos", "modulename": "inovopy.rosbridge", "qualname": "InovoRos", "kind": "class", "doc": "<h1 id=\"rosbridge\">RosBridge</h1>\n\n<p>A class managing rosbridge api communication</p>\n\n<h2 id=\"usage\">Usage</h2>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"kn\">from</span><span class=\"w\"> </span><span class=\"nn\">inovopy.rosbridge</span><span class=\"w\"> </span><span class=\"kn\">import</span> <span class=\"n\">InovoRos</span>\n\n<span class=\"n\">ros</span> <span class=\"o\">=</span> <span class=\"n\">InovoRos</span><span class=\"p\">(</span><span class=\"s2\">&quot;192.168.1.1&quot;</span><span class=\"p\">)</span>\n\n<span class=\"n\">ros</span><span class=\"o\">.</span><span class=\"n\">estop_reset</span><span class=\"p\">()</span>\n</code></pre>\n</div>\n", "bases": "inovopy.util.Loggable"}, {"fullname": "inovopy.rosbridge.InovoRos.__init__", "modulename": "inovopy.rosbridge", "qualname": "InovoRos.__init__", "kind": "function", "doc": "<p>initalize <code>InovoRos</code></p>\n\n<h2 id=\"args\">Args</h2>\n\n<ul>\n<li><code>host : str</code> : host of psu, preferably in form of <code>192.168.x.x</code></li>\n<li><code>logger: logging.Logger | str | None</code> :\n<ul>\n<li>if <code>logger</code> is instance of <code>logging.Logger</code>, it will log with it;</li>\n<li>if <code>logger</code> is <code>str</code>, new logger will be created with it as name</li>\n<li>otherwise, no log</li>\n</ul></li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">host</span><span class=\"p\">:</span> <span class=\"nb\">str</span>, </span><span class=\"param\"><span class=\"n\">logger</span><span class=\"p\">:</span> <span class=\"n\">logging</span><span class=\"o\">.</span><span class=\"n\">Logger</span> <span class=\"o\">|</span> <span class=\"nb\">str</span> <span class=\"o\">|</span> <span class=\"kc\">None</span> <span class=\"o\">=</span> <span class=\"kc\">None</span></span>)</span>"}, {"fullname": "inovopy.rosbridge.InovoRos.ros", "modulename": "inovopy.rosbridge", "qualname": "InovoRos.ros", "kind": "variable", "doc": "<p>connection manager to ROS server (<code>roslibpy.Ros</code>)</p>\n", "annotation": ": roslibpy.ros.Ros"}, {"fullname": "inovopy.rosbridge.InovoRos.tcp_speed_lin", "modulename": "inovopy.rosbridge", "qualname": "InovoRos.tcp_speed_lin", "kind": "variable", "doc": "<p></p>\n", "annotation": ": float", "default_value": "0"}, {"fullname": "inovopy.rosbridge.InovoRos.tcp_speed_ang", "modulename": "inovopy.rosbridge", "qualname": "InovoRos.tcp_speed_ang", "kind": "variable", "doc": "<p></p>\n", "annotation": ": float", "default_value": "0"}, {"fullname": "inovopy.rosbridge.InovoRos.tcp_pose_vec", "modulename": "inovopy.rosbridge", "qualname": "InovoRos.tcp_pose_vec", "kind": "variable", "doc": "<p></p>\n", "annotation": ": tuple[float, float, float]", "default_value": "(0, 0, 0)"}, {"fullname": "inovopy.rosbridge.InovoRos.tcp_pose_quat", "modulename": "inovopy.rosbridge", "qualname": "InovoRos.tcp_pose_quat", "kind": "variable", "doc": "<p></p>\n", "annotation": ": tuple[float, float, float, float]", "default_value": "(0, 0, 0, 0)"}, {"fullname": "inovopy.rosbridge.InovoRos.joint_pos", "modulename": "inovopy.rosbridge", "qualname": "InovoRos.joint_pos", "kind": "variable", "doc": "<p></p>\n", "annotation": ": list[float]", "default_value": "[]"}, {"fullname": "inovopy.rosbridge.InovoRos.joint_vel", "modulename": "inovopy.rosbridge", "qualname": "InovoRos.joint_vel", "kind": "variable", "doc": "<p></p>\n", "annotation": ": list[float]", "default_value": "[]"}, {"fullname": "inovopy.rosbridge.InovoRos.joint_eff", "modulename": "inovopy.rosbridge", "qualname": "InovoRos.joint_eff", "kind": "variable", "doc": "<p></p>\n", "annotation": ": list[float]", "default_value": "[]"}, {"fullname": "inovopy.rosbridge.InovoRos.voltage", "modulename": "inovopy.rosbridge", "qualname": "InovoRos.voltage", "kind": "variable", "doc": "<p></p>\n", "annotation": ": float", "default_value": "0"}, {"fullname": "inovopy.rosbridge.InovoRos.current", "modulename": "inovopy.rosbridge", "qualname": "InovoRos.current", "kind": "variable", "doc": "<p></p>\n", "annotation": ": float", "default_value": "0"}, {"fullname": "inovopy.rosbridge.InovoRos.power_status", "modulename": "inovopy.rosbridge", "qualname": "InovoRos.power_status", "kind": "variable", "doc": "<p></p>\n", "annotation": ": str", "default_value": "0"}, {"fullname": "inovopy.rosbridge.InovoRos.driver_state", "modulename": "inovopy.rosbridge", "qualname": "InovoRos.driver_state", "kind": "variable", "doc": "<p></p>\n", "annotation": ": str", "default_value": "&#x27;&#x27;"}, {"fullname": "inovopy.rosbridge.InovoRos.drive_powered", "modulename": "inovopy.rosbridge", "qualname": "InovoRos.drive_powered", "kind": "variable", "doc": "<p></p>\n", "annotation": ": bool", "default_value": "False"}, {"fullname": "inovopy.rosbridge.InovoRos.estop_active", "modulename": "inovopy.rosbridge", "qualname": "InovoRos.estop_active", "kind": "variable", "doc": "<p></p>\n", "annotation": ": bool", "default_value": "False"}, {"fullname": "inovopy.rosbridge.InovoRos.estop_circuit", "modulename": "inovopy.rosbridge", "qualname": "InovoRos.estop_circuit", "kind": "variable", "doc": "<p></p>\n", "annotation": ": bool", "default_value": "False"}, {"fullname": "inovopy.rosbridge.InovoRos.safe_stop_active", "modulename": "inovopy.rosbridge", "qualname": "InovoRos.safe_stop_active", "kind": "variable", "doc": "<p></p>\n", "annotation": ": bool", "default_value": "False"}, {"fullname": "inovopy.rosbridge.InovoRos.safe_stop_circuit", "modulename": "inovopy.rosbridge", "qualname": "InovoRos.safe_stop_circuit", "kind": "variable", "doc": "<p></p>\n", "annotation": ": bool", "default_value": "False"}, {"fullname": "inovopy.rosbridge.InovoRos.active_blocks", "modulename": "inovopy.rosbridge", "qualname": "InovoRos.active_blocks", "kind": "variable", "doc": "<p></p>\n", "annotation": ": list[str]", "default_value": "[]"}, {"fullname": "inovopy.rosbridge.InovoRos.current_block_progress", "modulename": "inovopy.rosbridge", "qualname": "InovoRos.current_block_progress", "kind": "variable", "doc": "<p></p>\n", "annotation": ": float", "default_value": "0"}, {"fullname": "inovopy.rosbridge.InovoRos.runtime_status", "modulename": "inovopy.rosbridge", "qualname": "InovoRos.runtime_status", "kind": "variable", "doc": "<p></p>\n", "annotation": ": inovopy.rosbridge.RuntimeState", "default_value": "0"}, {"fullname": "inovopy.rosbridge.InovoRos.variables", "modulename": "inovopy.rosbridge", "qualname": "InovoRos.variables", "kind": "variable", "doc": "<p></p>\n", "annotation": ": list[inovopy.rosbridge.Variable]", "default_value": "[]"}, {"fullname": "inovopy.rosbridge.InovoRos.host", "modulename": "inovopy.rosbridge", "qualname": "InovoRos.host", "kind": "variable", "doc": "<p></p>\n", "annotation": ": str"}, {"fullname": "inovopy.rosbridge.InovoRos.subscribers", "modulename": "inovopy.rosbridge", "qualname": "InovoRos.subscribers", "kind": "variable", "doc": "<p></p>\n", "annotation": ": dict[str, roslibpy.core.Topic]"}, {"fullname": "inovopy.rosbridge.InovoRos.safe_stop_reset", "modulename": "inovopy.rosbridge", "qualname": "InovoRos.safe_stop_reset", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">) -> <span class=\"n\">inovopy</span><span class=\"o\">.</span><span class=\"n\">rosbridge</span><span class=\"o\">.</span><span class=\"n\">InovoServiceResponse</span>:</span></span>", "funcdef": "def"}, {"fullname": "inovopy.rosbridge.InovoRos.estop_reset", "modulename": "inovopy.rosbridge", "qualname": "InovoRos.estop_reset", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">) -> <span class=\"n\">inovopy</span><span class=\"o\">.</span><span class=\"n\">rosbridge</span><span class=\"o\">.</span><span class=\"n\">InovoServiceResponse</span>:</span></span>", "funcdef": "def"}, {"fullname": "inovopy.rosbridge.InovoRos.power_on", "modulename": "inovopy.rosbridge", "qualname": "InovoRos.power_on", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">) -> <span class=\"n\">inovopy</span><span class=\"o\">.</span><span class=\"n\">rosbridge</span><span class=\"o\">.</span><span class=\"n\">InovoServiceResponse</span>:</span></span>", "funcdef": "def"}, {"fullname": "inovopy.rosbridge.InovoRos.power_off", "modulename": "inovopy.rosbridge", "qualname": "InovoRos.power_off", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">) -> <span class=\"n\">inovopy</span><span class=\"o\">.</span><span class=\"n\">rosbridge</span><span class=\"o\">.</span><span class=\"n\">InovoServiceResponse</span>:</span></span>", "funcdef": "def"}, {"fullname": "inovopy.rosbridge.InovoRos.robot_enable", "modulename": "inovopy.rosbridge", "qualname": "InovoRos.robot_enable", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">) -> <span class=\"n\">inovopy</span><span class=\"o\">.</span><span class=\"n\">rosbridge</span><span class=\"o\">.</span><span class=\"n\">InovoServiceResponse</span>:</span></span>", "funcdef": "def"}, {"fullname": "inovopy.rosbridge.InovoRos.robot_disable", "modulename": "inovopy.rosbridge", "qualname": "InovoRos.robot_disable", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">) -> <span class=\"n\">inovopy</span><span class=\"o\">.</span><span class=\"n\">rosbridge</span><span class=\"o\">.</span><span class=\"n\">InovoServiceResponse</span>:</span></span>", "funcdef": "def"}, {"fullname": "inovopy.rosbridge.InovoRos.runtime_start", "modulename": "inovopy.rosbridge", "qualname": "InovoRos.runtime_start", "kind": "function", "doc": "<p>start a sequence in runtime</p>\n\n<h2 id=\"args\">Args:</h2>\n\n<ul>\n<li><code>procedure_name : str | None</code>:\n<ul>\n<li>if <code>None</code>, will start from start block</li>\n<li>if <code>str</code>, will try to start function with respected name</li>\n</ul></li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">procedure_name</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">|</span> <span class=\"kc\">None</span> <span class=\"o\">=</span> <span class=\"kc\">None</span></span><span class=\"return-annotation\">) -> <span class=\"n\">inovopy</span><span class=\"o\">.</span><span class=\"n\">rosbridge</span><span class=\"o\">.</span><span class=\"n\">InovoServiceResponse</span>:</span></span>", "funcdef": "def"}, {"fullname": "inovopy.rosbridge.InovoRos.runtime_stop", "modulename": "inovopy.rosbridge", "qualname": "InovoRos.runtime_stop", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">) -> <span class=\"n\">inovopy</span><span class=\"o\">.</span><span class=\"n\">rosbridge</span><span class=\"o\">.</span><span class=\"n\">InovoServiceResponse</span>:</span></span>", "funcdef": "def"}, {"fullname": "inovopy.rosbridge.InovoRos.runtime_pause", "modulename": "inovopy.rosbridge", "qualname": "InovoRos.runtime_pause", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">) -> <span class=\"n\">inovopy</span><span class=\"o\">.</span><span class=\"n\">rosbridge</span><span class=\"o\">.</span><span class=\"n\">InovoServiceResponse</span>:</span></span>", "funcdef": "def"}, {"fullname": "inovopy.rosbridge.InovoRos.runtime_step", "modulename": "inovopy.rosbridge", "qualname": "InovoRos.runtime_step", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">) -> <span class=\"n\">inovopy</span><span class=\"o\">.</span><span class=\"n\">rosbridge</span><span class=\"o\">.</span><span class=\"n\">InovoServiceResponse</span>:</span></span>", "funcdef": "def"}, {"fullname": "inovopy.rosbridge.InovoRos.runtime_debug", "modulename": "inovopy.rosbridge", "qualname": "InovoRos.runtime_debug", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">) -> <span class=\"n\">inovopy</span><span class=\"o\">.</span><span class=\"n\">rosbridge</span><span class=\"o\">.</span><span class=\"n\">InovoServiceResponse</span>:</span></span>", "funcdef": "def"}, {"fullname": "inovopy.rosbridge.InovoRos.runtime_continue", "modulename": "inovopy.rosbridge", "qualname": "InovoRos.runtime_continue", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">) -> <span class=\"n\">inovopy</span><span class=\"o\">.</span><span class=\"n\">rosbridge</span><span class=\"o\">.</span><span class=\"n\">InovoServiceResponse</span>:</span></span>", "funcdef": "def"}, {"fullname": "inovopy.rosbridge.InovoRos.runtime_get_var", "modulename": "inovopy.rosbridge", "qualname": "InovoRos.runtime_get_var", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">name</span><span class=\"p\">:</span> <span class=\"nb\">str</span></span><span class=\"return-annotation\">) -> <span class=\"n\">inovopy</span><span class=\"o\">.</span><span class=\"n\">rosbridge</span><span class=\"o\">.</span><span class=\"n\">InovoServiceResponse</span>:</span></span>", "funcdef": "def"}, {"fullname": "inovopy.rosbridge.InovoRos.runtime_set_var", "modulename": "inovopy.rosbridge", "qualname": "InovoRos.runtime_set_var", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">name</span><span class=\"p\">:</span> <span class=\"nb\">str</span>, </span><span class=\"param\"><span class=\"n\">value</span><span class=\"p\">:</span> <span class=\"n\">Any</span></span><span class=\"return-annotation\">) -> <span class=\"n\">inovopy</span><span class=\"o\">.</span><span class=\"n\">rosbridge</span><span class=\"o\">.</span><span class=\"n\">InovoServiceResponse</span>:</span></span>", "funcdef": "def"}, {"fullname": "inovopy.rosbridge.InovoRos.jog", "modulename": "inovopy.rosbridge", "qualname": "InovoRos.jog", "kind": "function", "doc": "<p>Enter a context of jog command mode. Advertise when enter context\nand automatically unadvertise when exit.</p>\n\n<h2 id=\"yields\">Yields:</h2>\n\n<pre><code>`JogPublisher`: api for jog command\n</code></pre>\n\n<h2 id=\"example\">Example:</h2>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"kn\">import</span><span class=\"w\"> </span><span class=\"nn\">time</span>\n<span class=\"kn\">from</span><span class=\"w\"> </span><span class=\"nn\">inovopy.rosbridge</span><span class=\"w\"> </span><span class=\"kn\">import</span> <span class=\"n\">InovoRos</span>\n\n<span class=\"n\">ros</span> <span class=\"o\">=</span> <span class=\"n\">InovoRos</span><span class=\"p\">(</span><span class=\"s2\">&quot;192.168.1.122&quot;</span><span class=\"p\">,</span> <span class=\"s2\">&quot;Jog&quot;</span><span class=\"p\">)</span>\n\n<span class=\"k\">with</span> <span class=\"n\">ros</span><span class=\"o\">.</span><span class=\"n\">jog</span><span class=\"p\">()</span> <span class=\"k\">as</span> <span class=\"n\">j</span><span class=\"p\">:</span>\n    <span class=\"k\">for</span> <span class=\"n\">_</span> <span class=\"ow\">in</span> <span class=\"nb\">range</span><span class=\"p\">(</span><span class=\"mi\">1000</span><span class=\"p\">):</span>\n        <span class=\"n\">j</span><span class=\"o\">.</span><span class=\"n\">jog</span><span class=\"p\">(</span><span class=\"n\">z</span><span class=\"o\">=-</span><span class=\"mf\">0.01</span><span class=\"p\">)</span>\n        <span class=\"n\">time</span><span class=\"o\">.</span><span class=\"n\">sleep</span><span class=\"p\">(</span><span class=\"mf\">0.01</span><span class=\"p\">)</span>\n    <span class=\"k\">for</span> <span class=\"n\">_</span> <span class=\"ow\">in</span> <span class=\"nb\">range</span><span class=\"p\">(</span><span class=\"mi\">1000</span><span class=\"p\">):</span>\n        <span class=\"n\">j</span><span class=\"o\">.</span><span class=\"n\">jog</span><span class=\"p\">(</span><span class=\"n\">z</span><span class=\"o\">=</span><span class=\"mf\">0.01</span><span class=\"p\">)</span>\n        <span class=\"n\">time</span><span class=\"o\">.</span><span class=\"n\">sleep</span><span class=\"p\">(</span><span class=\"mf\">0.01</span><span class=\"p\">)</span>\n</code></pre>\n</div>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "inovopy.rosbridge.InovoRos.unsubscribe_all", "modulename": "inovopy.rosbridge", "qualname": "InovoRos.unsubscribe_all", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "inovopy.rosbridge.InovoRos.resubscribe_all", "modulename": "inovopy.rosbridge", "qualname": "InovoRos.resubscribe_all", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "inovopy.rosbridge.JogPublisher", "modulename": "inovopy.rosbridge", "qualname": "JogPublisher", "kind": "class", "doc": "<p>context manager for jog</p>\n\n<p>automatically advertise when <code>del</code></p>\n"}, {"fullname": "inovopy.rosbridge.JogPublisher.__init__", "modulename": "inovopy.rosbridge", "qualname": "JogPublisher.__init__", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">publisher</span><span class=\"p\">:</span> <span class=\"n\">roslibpy</span><span class=\"o\">.</span><span class=\"n\">core</span><span class=\"o\">.</span><span class=\"n\">Topic</span></span>)</span>"}, {"fullname": "inovopy.rosbridge.JogPublisher.publisher", "modulename": "inovopy.rosbridge", "qualname": "JogPublisher.publisher", "kind": "variable", "doc": "<p></p>\n", "annotation": ": roslibpy.core.Topic"}, {"fullname": "inovopy.rosbridge.JogPublisher.jog", "modulename": "inovopy.rosbridge", "qualname": "JogPublisher.jog", "kind": "function", "doc": "<p>Send a cartesian jog demand</p>\n\n<p>Args:\n    x (float, optional): target x. Defaults to 0.\n    y (float, optional): target y. Defaults to 0.\n    z (float, optional): target z. Defaults to 0.\n    rx (float, optional): target rx. Defaults to 0.\n    ry (float, optional): target ry. Defaults to 0.\n    rz (float, optional): target ry. Defaults to 0.</p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">x</span><span class=\"p\">:</span> <span class=\"nb\">float</span> <span class=\"o\">=</span> <span class=\"mi\">0</span>,</span><span class=\"param\">\t<span class=\"n\">y</span><span class=\"p\">:</span> <span class=\"nb\">float</span> <span class=\"o\">=</span> <span class=\"mi\">0</span>,</span><span class=\"param\">\t<span class=\"n\">z</span><span class=\"p\">:</span> <span class=\"nb\">float</span> <span class=\"o\">=</span> <span class=\"mi\">0</span>,</span><span class=\"param\">\t<span class=\"n\">rx</span><span class=\"p\">:</span> <span class=\"nb\">float</span> <span class=\"o\">=</span> <span class=\"mi\">0</span>,</span><span class=\"param\">\t<span class=\"n\">ry</span><span class=\"p\">:</span> <span class=\"nb\">float</span> <span class=\"o\">=</span> <span class=\"mi\">0</span>,</span><span class=\"param\">\t<span class=\"n\">rz</span><span class=\"p\">:</span> <span class=\"nb\">float</span> <span class=\"o\">=</span> <span class=\"mi\">0</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "inovopy.socket", "modulename": "inovopy.socket", "kind": "module", "doc": "<h1 id=\"socket-module\">Socket Module</h1>\n\n<p>This module provide api for handle generic socket communication\nfor communicating with robot for control.</p>\n\n<h2 id=\"class\">Class</h2>\n\n<ul>\n<li><code>TcpListener</code> : A class for managing listening socket connection</li>\n<li><code>TcpStream</code> : A class for managing socket communication to a client</li>\n<li><code>SocketExecption</code> : An Excpetion Class for all socket related exception\n<h2 id=\"example\">Example</h2></li>\n</ul>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"kn\">from</span><span class=\"w\"> </span><span class=\"nn\">inovopy.socket</span><span class=\"w\"> </span><span class=\"kn\">import</span> <span class=\"n\">TcpListener</span><span class=\"p\">,</span> <span class=\"n\">TcpStream</span>\n\n<span class=\"n\">listener</span> <span class=\"o\">=</span> <span class=\"n\">TcpListener</span><span class=\"p\">()</span>               <span class=\"c1\"># &lt;-- create a new listener</span>\n<span class=\"n\">stream</span><span class=\"p\">:</span> <span class=\"n\">TcpStream</span> <span class=\"o\">=</span> <span class=\"n\">listener</span><span class=\"o\">.</span><span class=\"n\">accept</span><span class=\"p\">()</span>  <span class=\"c1\"># &lt;-- accept a new connection</span>\n<span class=\"k\">del</span><span class=\"p\">(</span><span class=\"n\">listener</span><span class=\"p\">)</span>                          <span class=\"c1\"># &lt;-- delete the listener to stop listening</span>\n\n<span class=\"n\">stream</span><span class=\"o\">.</span><span class=\"n\">write</span><span class=\"p\">(</span><span class=\"s2\">&quot;Send this message&quot;</span><span class=\"p\">)</span>      <span class=\"c1\"># &lt;-- send a str message</span>\n<span class=\"n\">read_message</span> <span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"n\">stream</span><span class=\"o\">.</span><span class=\"n\">read</span><span class=\"p\">()</span>     <span class=\"c1\"># &lt;-- read a messagea as str</span>\n</code></pre>\n</div>\n"}, {"fullname": "inovopy.socket.SocketException", "modulename": "inovopy.socket", "qualname": "SocketException", "kind": "class", "doc": "<p>socket commuication exception</p>\n", "bases": "builtins.Exception"}, {"fullname": "inovopy.socket.EndOfCommunication", "modulename": "inovopy.socket", "qualname": "EndOfCommunication", "kind": "class", "doc": "<p>end of communication exception</p>\n", "bases": "builtins.Exception"}, {"fullname": "inovopy.socket.detect_interfaces", "modulename": "inovopy.socket", "qualname": "detect_interfaces", "kind": "function", "doc": "<p>try to automatically detect local ip of this machine\nin all local networks</p>\n\n<h2 id=\"return\">Return:</h2>\n\n<p><code>list[str]</code> a list of ip</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"return-annotation\">) -> <span class=\"nb\">list</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">]</span>:</span></span>", "funcdef": "def"}, {"fullname": "inovopy.socket.tcp_listener", "modulename": "inovopy.socket.tcp_listener", "kind": "module", "doc": "<h1 id=\"tcp-listener-module\">TCP Listener Module</h1>\n\n<p>This module provide an api class for listening tcp connection</p>\n\n<h2 id=\"classes\">Classes</h2>\n\n<ul>\n<li><code>TcpListener</code> : a class for managing and listening connection</li>\n</ul>\n"}, {"fullname": "inovopy.socket.tcp_listener.DEFAULT_PORT", "modulename": "inovopy.socket.tcp_listener", "qualname": "DEFAULT_PORT", "kind": "variable", "doc": "<p>Default port to listen on if no poort are specified <code>50003</code>.</p>\n", "annotation": ": int", "default_value": "50003"}, {"fullname": "inovopy.socket.tcp_listener.TcpListener", "modulename": "inovopy.socket.tcp_listener", "qualname": "TcpListener", "kind": "class", "doc": "<h1 id=\"tcplistener\">TcpListener</h1>\n\n<p>A class for listening to tcp connection</p>\n\n<h2 id=\"usage\">Usage</h2>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"kn\">from</span><span class=\"w\"> </span><span class=\"nn\">inovopy.socket</span><span class=\"w\"> </span><span class=\"kn\">import</span> <span class=\"n\">TcpListener</span>\n\n<span class=\"n\">example_listener</span> <span class=\"o\">=</span> <span class=\"n\">TcpListener</span><span class=\"p\">()</span>\n\n<span class=\"n\">example_stream</span> <span class=\"o\">=</span> <span class=\"n\">example_listener</span><span class=\"o\">.</span><span class=\"n\">accept</span><span class=\"p\">()</span>\n</code></pre>\n</div>\n", "bases": "inovopy.util.Loggable"}, {"fullname": "inovopy.socket.tcp_listener.TcpListener.__init__", "modulename": "inovopy.socket.tcp_listener", "qualname": "TcpListener.__init__", "kind": "function", "doc": "<p>initalize the tcp listener</p>\n\n<p>do not specify the host if you wish to listen at all\nof the host in your machine.</p>\n\n<p>specify the host if you wish to listen at a specific\nnetwork in you machine</p>\n\n<h2 id=\"parameter\">Parameter</h2>\n\n<ul>\n<li><code>host : str | None</code> : local ip</li>\n<li><code>port : int</code> : port to listen to</li>\n<li><code>logger: logging.Logger | str | None</code> :\n<ul>\n<li>if <code>logger</code> is instance of <code>logging.Logger</code>, it will log with it;</li>\n<li>if <code>logger</code> is <code>str</code>, new logger will be created with it as name</li>\n<li>otherwise, no log</li>\n</ul></li>\n</ul>\n\n<h2 id=\"exception\">Exception:</h2>\n\n<p><code>SocketException</code>:</p>\n\n<ul>\n<li>if no network interface found</li>\n<li>if not vaild socket are created</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">host</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">|</span> <span class=\"kc\">None</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">port</span><span class=\"p\">:</span> <span class=\"nb\">int</span> <span class=\"o\">=</span> <span class=\"mi\">50003</span>,</span><span class=\"param\">\t<span class=\"n\">logger</span><span class=\"p\">:</span> <span class=\"n\">logging</span><span class=\"o\">.</span><span class=\"n\">Logger</span> <span class=\"o\">|</span> <span class=\"nb\">str</span> <span class=\"o\">|</span> <span class=\"kc\">None</span> <span class=\"o\">=</span> <span class=\"kc\">None</span></span>)</span>"}, {"fullname": "inovopy.socket.tcp_listener.TcpListener.accept", "modulename": "inovopy.socket.tcp_listener", "qualname": "TcpListener.accept", "kind": "function", "doc": "<p>try accept a new tcp connection.</p>\n\n<h2 id=\"parameter\">Parameter:</h2>\n\n<ul>\n<li><code>logger: logging.Logger | str | None</code> : logger of returned <code>TcpStream</code>\n<ul>\n<li>if <code>logger</code> is instance of <code>logging.Logger</code>, it will log with it;</li>\n<li>if <code>logger</code> is <code>str</code>, new logger will be created with it as name</li>\n<li>otherwise, no log</li>\n</ul></li>\n</ul>\n\n<h2 id=\"return\">Return:</h2>\n\n<p><code>TcpStream</code> : the accepted tcp connetion</p>\n\n<h2 id=\"exception\">Exception:</h2>\n\n<p>No exception, will continue to try to accept if encounter <code>OSError</code></p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">stream_logger</span><span class=\"p\">:</span> <span class=\"n\">logging</span><span class=\"o\">.</span><span class=\"n\">Logger</span> <span class=\"o\">|</span> <span class=\"nb\">str</span> <span class=\"o\">|</span> <span class=\"kc\">None</span> <span class=\"o\">=</span> <span class=\"kc\">None</span></span><span class=\"return-annotation\">) -> <span class=\"n\">inovopy</span><span class=\"o\">.</span><span class=\"n\">socket</span><span class=\"o\">.</span><span class=\"n\">tcp_stream</span><span class=\"o\">.</span><span class=\"n\">TcpStream</span>:</span></span>", "funcdef": "def"}, {"fullname": "inovopy.socket.tcp_stream", "modulename": "inovopy.socket.tcp_stream", "kind": "module", "doc": "<h1 id=\"tcp-stream-module\">TCP Stream Module</h1>\n\n<p>This module provide an api class for managing tcp connection</p>\n\n<h2 id=\"class\">Class</h2>\n\n<ul>\n<li><code>TcpStream</code> : a class for managing tcp connection</li>\n</ul>\n"}, {"fullname": "inovopy.socket.tcp_stream.TcpStream", "modulename": "inovopy.socket.tcp_stream", "qualname": "TcpStream", "kind": "class", "doc": "<h1 id=\"tcpstream\">TcpStream</h1>\n\n<p>A class for managing tcp connetion</p>\n\n<h2 id=\"usage\">Usage</h2>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"kn\">from</span><span class=\"w\"> </span><span class=\"nn\">inovopy.socket</span><span class=\"w\"> </span><span class=\"kn\">import</span> <span class=\"n\">TcpListener</span><span class=\"p\">,</span> <span class=\"n\">TcpStream</span>\n\n<span class=\"n\">example_listener</span> <span class=\"p\">:</span> <span class=\"n\">TcpListener</span> <span class=\"o\">=</span> <span class=\"n\">TcpListener</span><span class=\"p\">()</span>\n\n<span class=\"n\">example_stream</span> <span class=\"p\">:</span> <span class=\"n\">TcpStream</span> <span class=\"o\">=</span> <span class=\"n\">example_listener</span><span class=\"o\">.</span><span class=\"n\">accept</span><span class=\"p\">()</span>\n\n<span class=\"n\">example_stream</span><span class=\"o\">.</span><span class=\"n\">write</span><span class=\"p\">(</span><span class=\"s2\">&quot;send a message&quot;</span><span class=\"p\">)</span>\n\n<span class=\"n\">read_message</span> <span class=\"o\">=</span> <span class=\"n\">example_stream</span><span class=\"o\">.</span><span class=\"n\">read</span><span class=\"p\">()</span>\n</code></pre>\n</div>\n", "bases": "inovopy.util.Loggable"}, {"fullname": "inovopy.socket.tcp_stream.TcpStream.__init__", "modulename": "inovopy.socket.tcp_stream", "qualname": "TcpStream.__init__", "kind": "function", "doc": "<p>initalize the stream</p>\n\n<h2 id=\"parameter\">Parameter</h2>\n\n<ul>\n<li><code>conn : socket.socket</code> : the socket connection</li>\n<li><code>logger: logging.Logger | str | None</code> :\n<ul>\n<li>if <code>logger</code> is instance of <code>logging.Logger</code>, it will log with it;</li>\n<li>if <code>logger</code> is <code>str</code>, new logger will be created with it as name</li>\n<li>otherwise, no log</li>\n</ul></li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">conn</span><span class=\"p\">:</span> <span class=\"n\">socket</span><span class=\"o\">.</span><span class=\"n\">socket</span>, </span><span class=\"param\"><span class=\"n\">logger</span><span class=\"p\">:</span> <span class=\"n\">logging</span><span class=\"o\">.</span><span class=\"n\">Logger</span> <span class=\"o\">|</span> <span class=\"nb\">str</span> <span class=\"o\">|</span> <span class=\"kc\">None</span> <span class=\"o\">=</span> <span class=\"kc\">None</span></span>)</span>"}, {"fullname": "inovopy.socket.tcp_stream.TcpStream.connect", "modulename": "inovopy.socket.tcp_stream", "qualname": "TcpStream.connect", "kind": "function", "doc": "<p>Try to connect to an socket address</p>\n\n<h2 id=\"parameter\">Parameter</h2>\n\n<ul>\n<li><code>ip : str</code>: if <code>None</code>, will try local machine</li>\n<li><code>port: int</code> : port to connect to</li>\n<li><code>logger: Logger</code>: logger for the resulted <code>TcpStream</code></li>\n</ul>\n\n<h2 id=\"return\">Return</h2>\n\n<p><code>TcpStream</code> the resulted connection</p>\n\n<h2 id=\"exception\">Exception:</h2>\n\n<p><code>SocketException</code></p>\n\n<ul>\n<li>if no network interface found</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">cls</span>,</span><span class=\"param\">\t<span class=\"n\">ip</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">|</span> <span class=\"kc\">None</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">port</span><span class=\"p\">:</span> <span class=\"nb\">int</span> <span class=\"o\">=</span> <span class=\"mi\">50003</span>,</span><span class=\"param\">\t<span class=\"n\">logger</span><span class=\"p\">:</span> <span class=\"n\">logging</span><span class=\"o\">.</span><span class=\"n\">Logger</span> <span class=\"o\">|</span> <span class=\"nb\">str</span> <span class=\"o\">|</span> <span class=\"kc\">None</span> <span class=\"o\">=</span> <span class=\"kc\">None</span></span><span class=\"return-annotation\">) -> <span class=\"n\">inovopy</span><span class=\"o\">.</span><span class=\"n\">socket</span><span class=\"o\">.</span><span class=\"n\">tcp_stream</span><span class=\"o\">.</span><span class=\"n\">TcpStream</span>:</span></span>", "funcdef": "def"}, {"fullname": "inovopy.socket.tcp_stream.TcpStream.ip", "modulename": "inovopy.socket.tcp_stream", "qualname": "TcpStream.ip", "kind": "variable", "doc": "<p>get the local ip of the socket</p>\n", "annotation": ": str"}, {"fullname": "inovopy.socket.tcp_stream.TcpStream.try_read", "modulename": "inovopy.socket.tcp_stream", "qualname": "TcpStream.try_read", "kind": "function", "doc": "<p>try to read a message from the socket</p>\n\n<h2 id=\"parameter\">Parameter</h2>\n\n<ul>\n<li><code>timout : float = 1.0</code> : time out for the reading</li>\n</ul>\n\n<h2 id=\"return\">Return</h2>\n\n<p><code>str</code> : read message; or\n<code>None</code> : if no message is recived</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">timeout</span><span class=\"p\">:</span> <span class=\"nb\">float</span> <span class=\"o\">=</span> <span class=\"mf\">1.0</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">str</span> <span class=\"o\">|</span> <span class=\"kc\">None</span>:</span></span>", "funcdef": "def"}, {"fullname": "inovopy.socket.tcp_stream.TcpStream.read", "modulename": "inovopy.socket.tcp_stream", "qualname": "TcpStream.read", "kind": "function", "doc": "<p>read a message form the connection</p>\n\n<p>maximum byte : <code>4096</code></p>\n\n<h2 id=\"return\">Return:</h2>\n\n<p><code>str</code> the message read</p>\n\n<h2 id=\"exception\">Exception:</h2>\n\n<p><code>SocketException</code>:</p>\n\n<ul>\n<li>if the read failed</li>\n<li>if <code>EOF</code> character is read</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">str</span>:</span></span>", "funcdef": "def"}, {"fullname": "inovopy.socket.tcp_stream.TcpStream.write", "modulename": "inovopy.socket.tcp_stream", "qualname": "TcpStream.write", "kind": "function", "doc": "<p>write a message to the connection</p>\n\n<h2 id=\"parameter\">Parameter:</h2>\n\n<ul>\n<li><code>msg : str</code> : string message to send</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">msg</span><span class=\"p\">:</span> <span class=\"nb\">str</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "inovopy.util", "modulename": "inovopy.util", "kind": "module", "doc": "<h1 id=\"utils-module\">Utils Module</h1>\n\n<p>This module provide utility functions and classes.</p>\n\n<h2 id=\"classes\">Classes</h2>\n\n<p><code>ConsoleHandler</code>: colorful python logging handler\n<code>Loggable</code> : helper interface for logging class</p>\n\n<h2 id=\"functions\">Functions</h2>\n\n<ul>\n<li><code>clean</code> : clean up all non visible character of a str</li>\n<li><code>clamp</code> : clamp float</li>\n</ul>\n"}, {"fullname": "inovopy.util.clean", "modulename": "inovopy.util", "qualname": "clean", "kind": "function", "doc": "<p>clean up all non visible characters of a str</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">s</span><span class=\"p\">:</span> <span class=\"nb\">str</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">str</span>:</span></span>", "funcdef": "def"}, {"fullname": "inovopy.util.clamp", "modulename": "inovopy.util", "qualname": "clamp", "kind": "function", "doc": "<p>clamp a float between a floor and a ceil</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">f</span><span class=\"p\">:</span> <span class=\"nb\">float</span>, </span><span class=\"param\"><span class=\"n\">floor</span><span class=\"p\">:</span> <span class=\"nb\">float</span>, </span><span class=\"param\"><span class=\"n\">ceil</span><span class=\"p\">:</span> <span class=\"nb\">float</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">float</span>:</span></span>", "funcdef": "def"}, {"fullname": "inovopy.util.ConsoleHandler", "modulename": "inovopy.util", "qualname": "ConsoleHandler", "kind": "class", "doc": "<p>A class for logging to console with color</p>\n\n<p>Base Class:</p>\n\n<ul>\n<li><code>logging.Handler</code></li>\n</ul>\n", "bases": "logging.Handler"}, {"fullname": "inovopy.util.ConsoleHandler.__init__", "modulename": "inovopy.util", "qualname": "ConsoleHandler.__init__", "kind": "function", "doc": "<p>Initializes the instance - basically setting the formatter to None\nand the filter list to empty.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">level</span><span class=\"o\">=</span><span class=\"mi\">0</span></span>)</span>"}, {"fullname": "inovopy.util.ConsoleHandler.ConsoleColor", "modulename": "inovopy.util", "qualname": "ConsoleHandler.ConsoleColor", "kind": "class", "doc": "<p>a internal class for changing console display color</p>\n"}, {"fullname": "inovopy.util.ConsoleHandler.ConsoleColor.RED", "modulename": "inovopy.util", "qualname": "ConsoleHandler.ConsoleColor.RED", "kind": "variable", "doc": "<p></p>\n", "default_value": "&#x27;\\x1b[31m&#x27;"}, {"fullname": "inovopy.util.ConsoleHandler.ConsoleColor.YELLOW", "modulename": "inovopy.util", "qualname": "ConsoleHandler.ConsoleColor.YELLOW", "kind": "variable", "doc": "<p></p>\n", "default_value": "&#x27;\\x1b[33m&#x27;"}, {"fullname": "inovopy.util.ConsoleHandler.ConsoleColor.GREEN", "modulename": "inovopy.util", "qualname": "ConsoleHandler.ConsoleColor.GREEN", "kind": "variable", "doc": "<p></p>\n", "default_value": "&#x27;\\x1b[32m&#x27;"}, {"fullname": "inovopy.util.ConsoleHandler.ConsoleColor.RESET", "modulename": "inovopy.util", "qualname": "ConsoleHandler.ConsoleColor.RESET", "kind": "variable", "doc": "<p></p>\n", "default_value": "&#x27;\\x1b[0m&#x27;"}, {"fullname": "inovopy.util.ConsoleHandler.emit", "modulename": "inovopy.util", "qualname": "ConsoleHandler.emit", "kind": "function", "doc": "<p>Do whatever it takes to actually log the specified logging record.</p>\n\n<p>This version is intended to be implemented by subclasses and so\nraises a NotImplementedError.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">record</span><span class=\"p\">:</span> <span class=\"n\">logging</span><span class=\"o\">.</span><span class=\"n\">LogRecord</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "inovopy.util.get_package_logger", "modulename": "inovopy.util", "qualname": "get_package_logger", "kind": "function", "doc": "<p>Get package logger</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"return-annotation\">) -> <span class=\"n\">logging</span><span class=\"o\">.</span><span class=\"n\">Logger</span>:</span></span>", "funcdef": "def"}, {"fullname": "inovopy.util.Loggable", "modulename": "inovopy.util", "qualname": "Loggable", "kind": "class", "doc": "<p>A simple interface baseclass for logging class</p>\n\n<p>Function:</p>\n\n<ul>\n<li><code>debug(*args, **kwargs)</code> : transparent to <code>logger.Logger.debug</code></li>\n<li><code>info(*args, **kwargs)</code> : transparent to <code>logger.Logger.info</code></li>\n<li><code>warning(*args, **kwargs)</code> : transparent to <code>logger.Logger.warning</code></li>\n<li><code>error(*args, **kwargs)</code> : transparent to <code>logger.Logger.error</code></li>\n<li><code>critical(*args, **kwargs)</code> : transparent to <code>logger.Logger.critical</code></li>\n</ul>\n", "bases": "abc.ABC"}, {"fullname": "inovopy.util.Loggable.__init__", "modulename": "inovopy.util", "qualname": "Loggable.__init__", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">logger</span><span class=\"p\">:</span> <span class=\"n\">logging</span><span class=\"o\">.</span><span class=\"n\">Logger</span> <span class=\"o\">|</span> <span class=\"nb\">str</span> <span class=\"o\">|</span> <span class=\"kc\">None</span> <span class=\"o\">=</span> <span class=\"kc\">None</span></span>)</span>"}, {"fullname": "inovopy.util.Loggable.logger", "modulename": "inovopy.util", "qualname": "Loggable.logger", "kind": "variable", "doc": "<p></p>\n", "annotation": ": logging.Logger | None"}, {"fullname": "inovopy.util.Loggable.get_class_logger", "modulename": "inovopy.util", "qualname": "Loggable.get_class_logger", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">cls</span></span><span class=\"return-annotation\">) -> <span class=\"n\">logging</span><span class=\"o\">.</span><span class=\"n\">Logger</span>:</span></span>", "funcdef": "def"}, {"fullname": "inovopy.util.Loggable.get_logger", "modulename": "inovopy.util", "qualname": "Loggable.get_logger", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">cls</span>, </span><span class=\"param\"><span class=\"n\">name</span><span class=\"p\">:</span> <span class=\"nb\">str</span></span><span class=\"return-annotation\">) -> <span class=\"n\">logging</span><span class=\"o\">.</span><span class=\"n\">Logger</span>:</span></span>", "funcdef": "def"}, {"fullname": "inovopy.util.Loggable.debug", "modulename": "inovopy.util", "qualname": "Loggable.debug", "kind": "function", "doc": "<p>transparent to <code>logger.Logger.debug</code></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"o\">*</span><span class=\"n\">args</span>, </span><span class=\"param\"><span class=\"o\">**</span><span class=\"n\">kwargs</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "inovopy.util.Loggable.info", "modulename": "inovopy.util", "qualname": "Loggable.info", "kind": "function", "doc": "<p>transparent to <code>logger.Logger.info</code></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"o\">*</span><span class=\"n\">args</span>, </span><span class=\"param\"><span class=\"o\">**</span><span class=\"n\">kwargs</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "inovopy.util.Loggable.warning", "modulename": "inovopy.util", "qualname": "Loggable.warning", "kind": "function", "doc": "<p>transparent to <code>logger.Logger.warning</code></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"o\">*</span><span class=\"n\">args</span>, </span><span class=\"param\"><span class=\"o\">**</span><span class=\"n\">kwargs</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "inovopy.util.Loggable.error", "modulename": "inovopy.util", "qualname": "Loggable.error", "kind": "function", "doc": "<p>transparent to <code>logger.Logger.error</code></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"o\">*</span><span class=\"n\">args</span>, </span><span class=\"param\"><span class=\"o\">**</span><span class=\"n\">kwargs</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "inovopy.util.Loggable.critical", "modulename": "inovopy.util", "qualname": "Loggable.critical", "kind": "function", "doc": "<p>transparent to <code>logger.Logger.critical</code></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"o\">*</span><span class=\"n\">args</span>, </span><span class=\"param\"><span class=\"o\">**</span><span class=\"n\">kwargs</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "inovopy.util.LOGGING_CONFIG", "modulename": "inovopy.util", "qualname": "LOGGING_CONFIG", "kind": "variable", "doc": "<p>A simple config for <code>logging</code></p>\n\n<p>Usage:</p>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"kn\">from</span><span class=\"w\"> </span><span class=\"nn\">logging.config</span><span class=\"w\"> </span><span class=\"kn\">import</span> <span class=\"n\">dictConfig</span>\n<span class=\"kn\">from</span><span class=\"w\"> </span><span class=\"nn\">inovopy.util</span><span class=\"w\"> </span><span class=\"kn\">import</span> <span class=\"n\">LOGGING_CONFIG</span>\n\n<span class=\"n\">dictConfig</span><span class=\"p\">(</span><span class=\"n\">LOGGING_CONFIG</span><span class=\"p\">)</span>\n</code></pre>\n</div>\n", "default_value": "{&#x27;version&#x27;: 1, &#x27;disable_existing_loggers&#x27;: False, &#x27;formatters&#x27;: {&#x27;simpleformatter&#x27;: {&#x27;format&#x27;: &#x27;%(name)-10s %(levelname)-7s %(message)s&#x27;}, &#x27;detailformatter&#x27;: {&#x27;format&#x27;: &#x27;%(asctime)s %(name)-10s %(levelname)-7s %(funcName)s() L%(lineno)-4d %(message)s&#x27;, &#x27;datefmt&#x27;: &#x27;%Y-%m-%d %H:%M:%S&#x27;}}, &#x27;handlers&#x27;: {&#x27;rotatehandler&#x27;: {&#x27;class&#x27;: &#x27;logging.handlers.RotatingFileHandler&#x27;, &#x27;formatter&#x27;: &#x27;detailformatter&#x27;, &#x27;filename&#x27;: &#x27;logging/master_log.log&#x27;, &#x27;maxBytes&#x27;: 50000000, &#x27;backupCount&#x27;: 3}, &#x27;consolehandler&#x27;: {&#x27;()&#x27;: &#x27;inovopy.util.ConsoleHandler&#x27;, &#x27;formatter&#x27;: &#x27;simpleformatter&#x27;, &#x27;level&#x27;: &#x27;INFO&#x27;}}, &#x27;loggers&#x27;: {&#x27;root&#x27;: {&#x27;handlers&#x27;: [&#x27;consolehandler&#x27;, &#x27;rotatehandler&#x27;], &#x27;level&#x27;: &#x27;DEBUG&#x27;, &#x27;propagate&#x27;: True}}}"}];

    // mirrored in build-search-index.js (part 1)
    // Also split on html tags. this is a cheap heuristic, but good enough.
    elasticlunr.tokenizer.setSeperator(/[\s\-.;&_'"=,()]+|<[^>]*>/);

    let searchIndex;
    if (docs._isPrebuiltIndex) {
        console.info("using precompiled search index");
        searchIndex = elasticlunr.Index.load(docs);
    } else {
        console.time("building search index");
        // mirrored in build-search-index.js (part 2)
        searchIndex = elasticlunr(function () {
            this.pipeline.remove(elasticlunr.stemmer);
            this.pipeline.remove(elasticlunr.stopWordFilter);
            this.addField("qualname");
            this.addField("fullname");
            this.addField("annotation");
            this.addField("default_value");
            this.addField("signature");
            this.addField("bases");
            this.addField("doc");
            this.setRef("fullname");
        });
        for (let doc of docs) {
            searchIndex.addDoc(doc);
        }
        console.timeEnd("building search index");
    }

    return (term) => searchIndex.search(term, {
        fields: {
            qualname: {boost: 4},
            fullname: {boost: 2},
            annotation: {boost: 2},
            default_value: {boost: 2},
            signature: {boost: 2},
            bases: {boost: 2},
            doc: {boost: 1},
        },
        expand: true
    });
})();